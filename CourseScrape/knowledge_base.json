[
    {
        "topic": "python",
        "title": "Python Tutorial",
        "content": "Python Tutorial ❮ Home Next ❯ Learn Python Python is a popular programming language. Python can be used on a server to create web applications. Start learning Python now » Learning by Examples With our \"Try it Yourself\" editor, you can edit Python code and view the result. Example print(\"Hello, World!\") Try it Yourself » Click on the \"Try it Yourself\" button to see how it works. Python File Handling In our File Handling section you will learn how to open, read, write, and delete files. Python File Handling Python Database Handling In our database section you will learn how to access and work with MySQL and MongoDB databases: Python MySQL Tutorial Python MongoDB Tutorial Python Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Python Exercises Python Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Python Examples Python Quiz Test your Python skills with a quiz. Python Quiz Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Python Reference You will also find complete function and method references: Reference Overview Built-in Functions String Methods List/Array Methods Dictionary Methods Tuple Methods Set Methods File Methods Python Keywords Python Exceptions Python Glossary Random Module Requests Module Math Module CMath Module Download Python Download Python from the official Python web site: https://python.org Kickstart your career Get certified by completing the course Get certified w3schools CERTIFIED . 2025 ❮ Home Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [
            "print(\"Hello, World!\")"
        ],
        "source": "w3schools",
        "url": "https://www.w3schools.com/python/default.asp",
        "level": "beginner"
    },
    {
        "topic": "python",
        "title": "Sass String Functions",
        "content": "Sass String Functions ❮ Previous Next ❯ Sass String Functions The string functions are used to manipulate and get information about strings. Sass strings are 1-based. The first character in a string is at index 1, not 0. The following table lists all string functions in Sass: Function Description & Example quote(string) Adds quotes to string, and returns the result. Example:quote(Hello world!)Result: \"Hello world!\" str-index(string, substring) Returns the index of the first occurrence of the substring within string. Example:str-index(\"Hello world!\", \"H\")Result: 1 str-insert(string, insert, index) Returns string with insert inserted at the specified index position. Example:str-insert(\"Hello world!\", \" wonderful\", 6)Result: \"Hello wonderful world!\" str-length(string) Returns the length of string (in characters). Example:str-length(\"Hello world!\")Result: 12 str-slice(string, start, end) Extracts characters from string; start at start and end at end, and returns the slice. Example:str-slice(\"Hello world!\", 2, 5)Result: \"ello\" to-lower-case(string) Returns a copy of string converted to lower case. Example:to-lower-case(\"Hello World!\")Result: \"hello world!\" to-upper-case(string) Returns a copy of string converted to upper case. Example:to-upper-case(\"Hello World!\")Result: \"HELLO WORLD!\" unique-id() Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session). Example:unique-id()Result: tyghefnsv unquote(string) Removes quotes around string (if any), and returns the result. Example:unquote(\"Hello world!\")Result: Hello world! ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [],
        "source": "w3schools",
        "url": "https://www.w3schools.com/sass/sass_functions_string.php",
        "level": "beginner"
    },
    {
        "topic": "python",
        "title": "Python - Access Dictionary Items",
        "content": "Python - Access Dictionary Items ❮ Previous Next ❯ Accessing Items You can access the items of a dictionary by referring to its key name, inside square brackets: Example Get the value of the \"model\" key: thisdict = { \"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964 }x = thisdict[\"model\"] Try it Yourself » There is also a method called get() that will give you the same result: Example Get the value of the \"model\" key: x = thisdict.get(\"model\") Try it Yourself » Get Keys The keys() method will return a list of all the keys in the dictionary. Example Get a list of the keys: x = thisdict.keys() Try it Yourself » The list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list. Example Add a new item to the original dictionary, and see that the keys list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.keys()print(x) #before the changecar[\"color\"] = \"white\"print(x) #after the change Try it Yourself » Get Values The values() method will return a list of all the values in the dictionary. Example Get a list of the values: x = thisdict.values() Try it Yourself » The list of the values is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the values list. Example Make a change in the original dictionary, and see that the values list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.values()print(x) #before the changecar[\"year\"] = 2020print(x) #after the change Try it Yourself » Example Add a new item to the original dictionary, and see that the values list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.values()print(x) #before the changecar[\"color\"] = \"red\"print(x) #after the change Try it Yourself » Get Items The items() method will return each item in a dictionary, as tuples in a list. Example Get a list of the key:value pairs x = thisdict.items() Try it Yourself » The returned list is a view of the items of the dictionary, meaning that any changes done to the dictionary will be reflected in the items list. Example Make a change in the original dictionary, and see that the items list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.items()print(x) #before the changecar[\"year\"] = 2020print(x) #after the change Try it Yourself » Example Add a new item to the original dictionary, and see that the items list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.items()print(x) #before the changecar[\"color\"] = \"red\"print(x) #after the change Try it Yourself » Check if Key Exists To determine if a specified key is present in a dictionary use the in keyword: Example Check if \"model\" is present in the dictionary: thisdict = { \"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964 } if \"model\" in thisdict: print(\"Yes, 'model' is one of the keys in the thisdict dictionary\") Try it Yourself » ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [
            "thisdict =\t{\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}x = thisdict[\"model\"]",
            "x = thisdict.get(\"model\")",
            "x = thisdict.keys()",
            "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.keys()print(x) #before the changecar[\"color\"] =\n  \"white\"print(x) #after the change",
            "x = thisdict.values()",
            "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.values()print(x) #before the changecar[\"year\"]\n  = 2020print(x) #after the change",
            "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.values()print(x) #before the changecar[\"color\"]\n  = \"red\"print(x) #after the change",
            "x = thisdict.items()",
            "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.items()print(x) #before the changecar[\"year\"]\n  = 2020print(x) #after the change",
            "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.items()print(x) #before the changecar[\"color\"]\n  = \"red\"print(x) #after the change",
            "thisdict =\t{\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\n  if \"model\" in thisdict:  print(\"Yes, 'model' is\n  one of the keys in the thisdict dictionary\")"
        ],
        "source": "w3schools",
        "url": "https://www.w3schools.com/python/python_dictionaries_access.asp",
        "level": "beginner"
    },
    {
        "topic": "python",
        "title": "Bootstrap 5 Quiz",
        "content": "Bootstrap 5 Quiz ❮ Previous Next ❯ You can test your Bootstrap 5 skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about Bootstrap 5. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the Bootstrap Quiz 5 ❯ If you don't know Bootstrap 5, we suggest that you read our Bootstrap 5 Tutorial from scratch. ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [],
        "source": "w3schools",
        "url": "https://www.w3schools.com/bootstrap5/bootstrap_quiz.php",
        "level": "beginner"
    },
    {
        "topic": "javascript",
        "title": "JavaScript Tutorial",
        "content": "JavaScript Tutorial ❮ Home Next ❯ Learn JavaScript JavaScript is the world's most popular programming language. JavaScript is the programming language of the Web. JavaScript is easy to learn. This tutorial will teach you JavaScript from basic to advanced. Start learning JavaScript now » Examples in Each Chapter With our \"Try it Yourself\" editor, you can edit the source code and view the result. Example My First JavaScript Click me to display Date and Time Try it Yourself » Use the Menu We recommend reading this tutorial, in the sequence listed in the menu. If you have a large screen, the menu will always be present on the left. If you have a small screen, open the menu by clicking the top menu sign ☰. Learn by Examples Examples are better than 1000 words. Examples are often easier to understand than text explanations. This tutorial supplements all explanations with clarifying \"Try it Yourself\" examples. If you try all the examples, you will learn a lot about JavaScript, in a very short time! JavaScript Examples » Why Study JavaScript? JavaScript is one of the 3 languages all web developers must learn: 1. HTML to define the content of web pages 2. CSS to specify the layout of web pages 3. JavaScript to program the behavior of web pages This tutorial covers every version of JavaScript: The Original JavaScript ES1 ES2 ES3 (1997-1999) The First Main Revision ES5 (2009) The Second Revision ES6 (2015) The Yearly Additions (2016, 2017 ... 2021, 2022) Learning Speed In this tutorial, the learning speed is your choice. Everything is up to you. If you are struggling, take a break, or re-read the material. Always make sure you understand all the \"Try-it-Yourself\" examples. The only way to become a clever programmer is to: Practice. Practice. Practice. Code. Code. Code ! Commonly Asked Questions How do I get JavaScript? Where can I download JavaScript? Is JavaScript Free? You don't have to get or download JavaScript. JavaScript is already running in your browser on your computer, on your tablet, and on your smart-phone. JavaScript is free to use for everyone. JavaScript Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all JavaScript Exercises JavaScript Quiz Test Test your JavaScript skills at W3Schools! Start JavaScript Quiz! Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. JavaScript References W3Schools maintains a complete JavaScript reference, including all HTML and browser objects. The reference contains examples for all properties, methods and events, and is continuously updated according to the latest web standards. Complete JavaScript Reference » Kickstart your career Get certified by completing the course Get certified w3schools CERTIFIED . 2025 ❮ Home Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [],
        "source": "w3schools",
        "url": "https://www.w3schools.com/js/default.asp",
        "level": "beginner"
    },
    {
        "topic": "javascript",
        "title": "Sass String Functions",
        "content": "Sass String Functions ❮ Previous Next ❯ Sass String Functions The string functions are used to manipulate and get information about strings. Sass strings are 1-based. The first character in a string is at index 1, not 0. The following table lists all string functions in Sass: Function Description & Example quote(string) Adds quotes to string, and returns the result. Example:quote(Hello world!)Result: \"Hello world!\" str-index(string, substring) Returns the index of the first occurrence of the substring within string. Example:str-index(\"Hello world!\", \"H\")Result: 1 str-insert(string, insert, index) Returns string with insert inserted at the specified index position. Example:str-insert(\"Hello world!\", \" wonderful\", 6)Result: \"Hello wonderful world!\" str-length(string) Returns the length of string (in characters). Example:str-length(\"Hello world!\")Result: 12 str-slice(string, start, end) Extracts characters from string; start at start and end at end, and returns the slice. Example:str-slice(\"Hello world!\", 2, 5)Result: \"ello\" to-lower-case(string) Returns a copy of string converted to lower case. Example:to-lower-case(\"Hello World!\")Result: \"hello world!\" to-upper-case(string) Returns a copy of string converted to upper case. Example:to-upper-case(\"Hello World!\")Result: \"HELLO WORLD!\" unique-id() Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session). Example:unique-id()Result: tyghefnsv unquote(string) Removes quotes around string (if any), and returns the result. Example:unquote(\"Hello world!\")Result: Hello world! ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [],
        "source": "w3schools",
        "url": "https://www.w3schools.com/sass/sass_functions_string.php",
        "level": "beginner"
    },
    {
        "topic": "javascript",
        "title": "Bootstrap 5 Quiz",
        "content": "Bootstrap 5 Quiz ❮ Previous Next ❯ You can test your Bootstrap 5 skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about Bootstrap 5. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the Bootstrap Quiz 5 ❯ If you don't know Bootstrap 5, we suggest that you read our Bootstrap 5 Tutorial from scratch. ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [],
        "source": "w3schools",
        "url": "https://www.w3schools.com/bootstrap5/bootstrap_quiz.php",
        "level": "beginner"
    },
    {
        "topic": "javascript",
        "title": "Become a Plus User at W3schools - Upgrade to Improve Your Learning Experience",
        "content": "W3Schools Plus Unlock Powerful Features By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. Monthly Annually Free $0 /Forever This is for you that are beginning to explore coding and web development Track your progress Set your goals Build and host 1 static website 100 credits/month Access various AI features like W3Schools kAI coding tutor and interview preparation. No support Get Free W3Schools Plus $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. Ad-free experience Unlimited challenges Unlimited practice tests Build and host 15 static websites Build and host 1 full stack server Choose from 75+ templates 10000 credits/month Access various AI features like W3Schools kAI coding tutor and interview preparation. Cancel anytime Get Plus W3Schools Academy For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. Ad-free for focused learning Dashboard to manage your classroom Study plans for structured learning Track progress with insights Interactive code challenges and projects Access to all courses and certification exams Spaces for building and publishing projects Get More Info No More Ads Learn without any distractions More Spaces! Unlock the option to create more W3Schools Spaces Learn from proven tutorials used by millions of learners! Our platform has been used by learners for over 23 years, with a continuously growing audience of learners and constantly updated and improved learning material! Monthly visits 70m+ Yearly pageviews 3bn+ Spaces created 1m+ W3Schools Spaces Code Websites directly in the browser - No setup required Sign Up For Free Read More What's the benefit and details of the subscription plans? Check out our plans here to view the difference. How are subscriptions renewed? Your subscription will be automatically renewed every month. What happens if I cancel my subscription? Your access to all the benefits for the paid period of time will continue, however the subscription will not be renewed automatically. Can I subscribe multiple accounts at once? To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com Have some questions? Visit our support page Or send an email to sales@w3schools.com Subscribe for $14.99 /month Cancel anytime. ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [],
        "source": "w3schools",
        "url": "https://www.w3schools.com/plus/index.php",
        "level": "beginner"
    },
    {
        "topic": "sql",
        "title": "SQL Tutorial",
        "content": "SQL Tutorial ❮ Home Next ❯ Learn SQL SQL is a standard language for storing, manipulating and retrieving data in databases. Our SQL tutorial will teach you how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems. Start learning SQL now » Examples in Each Chapter With our online SQL editor, you can edit the SQL statements, and click on a button to view the result. Example SELECT * FROM Customers; Try it Yourself » Click on the \"Try it Yourself\" button to see how it works. SQL Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all SQL Exercises SQL Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All SQL Examples SQL Quiz Test Test your SQL skills at W3Schools! Start SQL Quiz! Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. SQL References At W3Schools you will find a complete reference for keywords and functions: SQL Keyword Reference MYSQL Functions SQLServer Functions MS Access Functions SQL Quick Reference SQL Data Types Data types and ranges for Microsoft Access, MySQL and SQL Server. SQL Data Types Kickstart your career Get certified by completing the course Get certified w3schools CERTIFIED . 2025 ❮ Home Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [
            "SELECT * FROM Customers;"
        ],
        "source": "w3schools",
        "url": "https://www.w3schools.com/sql/default.asp",
        "level": "beginner"
    },
    {
        "topic": "sql",
        "title": "Sass String Functions",
        "content": "Sass String Functions ❮ Previous Next ❯ Sass String Functions The string functions are used to manipulate and get information about strings. Sass strings are 1-based. The first character in a string is at index 1, not 0. The following table lists all string functions in Sass: Function Description & Example quote(string) Adds quotes to string, and returns the result. Example:quote(Hello world!)Result: \"Hello world!\" str-index(string, substring) Returns the index of the first occurrence of the substring within string. Example:str-index(\"Hello world!\", \"H\")Result: 1 str-insert(string, insert, index) Returns string with insert inserted at the specified index position. Example:str-insert(\"Hello world!\", \" wonderful\", 6)Result: \"Hello wonderful world!\" str-length(string) Returns the length of string (in characters). Example:str-length(\"Hello world!\")Result: 12 str-slice(string, start, end) Extracts characters from string; start at start and end at end, and returns the slice. Example:str-slice(\"Hello world!\", 2, 5)Result: \"ello\" to-lower-case(string) Returns a copy of string converted to lower case. Example:to-lower-case(\"Hello World!\")Result: \"hello world!\" to-upper-case(string) Returns a copy of string converted to upper case. Example:to-upper-case(\"Hello World!\")Result: \"HELLO WORLD!\" unique-id() Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session). Example:unique-id()Result: tyghefnsv unquote(string) Removes quotes around string (if any), and returns the result. Example:unquote(\"Hello world!\")Result: Hello world! ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [],
        "source": "w3schools",
        "url": "https://www.w3schools.com/sass/sass_functions_string.php",
        "level": "beginner"
    },
    {
        "topic": "sql",
        "title": "SQL Server CONVERT() Function",
        "content": "SQL Server CONVERT() Function ❮ Previous ❮ SQL Server Functions Next ❯ Example Convert an expression to int: SELECT CONVERT(int, 25.65); Try it Yourself » Definition and Usage The CONVERT() function converts a value (of any type) into a specified datatype. Tip: Also look at the CAST() function. Syntax CONVERT(data_type(length), expression, style) Parameter Values Value Description data_type Required. The datatype to convert expression to. Can be one of the following: bigint, int, smallint, tinyint, bit, decimal, numeric, money, smallmoney, float, real, datetime, smalldatetime, char, varchar, text, nchar, nvarchar, ntext, binary, varbinary, or image (length) Optional. The length of the resulting data type (for char, varchar, nchar, nvarchar, binary and varbinary) expression Required. The value to convert to another data type style Optional. The format used to convert between data types, such as a date or string format. Can be one of the following values: Converting datetime to character: Without century With century Input/Output Standard 0100mon dd yyyy hh:miAM/PMDefault 1101mm/dd/yyyy US 2102 yyyy.mm.ddANSI 3103 dd/mm/yyyyBritish/French 4104dd.mm.yyyyGerman 5105 dd-mm-yyyyItalian 6106dd mon yyyy- 7107Mon dd, yyyy- 8108hh:mm:ss- 9109mon dd yyyy hh:mi:ss:mmmAM (or PM)Default + millisec 10110mm-dd-yyyyUSA 11111 yyyy/mm/ddJapan 12112 yyyymmddISO 13113dd mon yyyy hh:mi:ss:mmm Europe (24 hour clock)> 14114hh:mi:ss:mmm24 hour clock 20120yyyy-mm-dd hh:mi:ssODBC canonical (24 hour clock) 21121yyyy-mm-dd hh:mi:ss.mmmODBC canonical (24 hour clock) 126yyyy-mm-ddThh:mi:ss.mmmISO8601 127yyyy-mm-ddThh:mi:ss.mmmZISO8601 (with time zone Z) 130dd mon yyyy hh:mi:ss:mmmAMHijiri 131dd/mm/yy hh:mi:ss:mmmAMHijiri Converting float to real: Value Explanation 0Maximum 6 digits (default) 18 digits 216 digits Converting money to character: Value Explanation 0No comma delimiters, 2 digits to the right of decimal 1Comma delimiters, 2 digits to the right of decimal 2 No comma delimiters, 4 digits to the right of decimal Technical Details Works in: SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data Warehouse, Parallel Data Warehouse More Examples Example Convert an expression from one data type to another (varchar): SELECT CONVERT(varchar, 25.65); Try it Yourself » Example Convert an expression from one data type to another (datetime): SELECT CONVERT(datetime, '2017-08-25'); Try it Yourself » Example Convert an expression from one data type to another (varchar): SELECT CONVERT(varchar, '2017-08-25', 101); Try it Yourself » ❮ Previous ❮ SQL Server Functions Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
        "code_examples": [
            "SELECT CONVERT(int, 25.65);",
            "CONVERT(data_type(length), expression, style)",
            "SELECT CONVERT(varchar, 25.65);",
            "SELECT CONVERT(datetime, '2017-08-25');",
            "SELECT CONVERT(varchar,\n  '2017-08-25', 101);"
        ],
        "source": "w3schools",
        "url": "https://www.w3schools.com/sql/func_sqlserver_convert.asp",
        "level": "beginner"
    },
    {
        "topic": "python",
        "title": "Python Tutorial | Learn Python Programming Language | GeeksforGeeks",
        "content": "Python Tutorial | Learn Python Programming Language Last Updated : 30 Apr, 2025 Comments Improve Suggest changes Like Article Like Report Python Tutorial – Python is one of the most popular programming languages. It’s simple to use, packed with features and supported by a wide range of libraries and frameworks. Its clean syntax makes it beginner-friendly.Python is:A high-level language, used in web development, data science, automation, AI and more.Known for its readability, which means code is easier to write, understand and maintain.Backed by library support, so we don’t have to build everything from scratch, there’s probably a library that already does what we need.Why to Learn Python?Python requires fewer lines of code compared to other programming languages.Python is in high demand as it provides many job opportunities in Software Development, Data Science and AI/ML.Python provides popular Web Development, AI/ML, Data Science and Data Analysis Libraries like Django, Flask, Pandas, Tensorflow, Scikit-learn and many more.Python is an object oriented programming language which encapsulates code within object.Python is cross-platform which works on Windows, Mac and Linux without major changes.Python is used by big companies like Google, Netflix and NASA.First Python ProgramHere is a simple Python code, printing a string. We recommend we to edit the code and try to print our own name. Python print(\"Hello World\") OutputHello World 1. Python BasicsIn this section, we’ll cover the basics of Python programming, including installing Python, writing first program, understanding comments and working with variables, keywords and operators. These are essential building blocks to get started with Python coding.Before starting to learn python we need to install python on our system.IntroductionInput and OutputVariablesOperatorsQuiz:Basics, I/OKeywordsData TypesQuiz:Data Types, Numbers, BooleanConditional StatementsPython LoopsQuiz :Control Flow, Loops2. Python FunctionsPython Functions are the backbone of organized and efficient code in Python. Here, in this section of Python 3 tutorial we'll explore their syntax, parameter handling, return values and variable scope. From basic concepts to advanced techniques like closures and decorators. Along the way, we'll also introduce versatile functions like range(), map, filter and lambda functions. def keywordUse of pass Statement in FunctionReturn statementGlobal and Local VariablesRecursion in Python*args and **kwargs in Function‘Self’ as Default ArgumentFirst Class FunctionLambda FunctionMap, Reduce and Filter FunctionInner FunctionDecoratorsQuiz: Functions3. Python Data StructuresPython offers versatile collections of data types, including lists, string, tuples, sets, dictionaries and arrays. In this section, we will learn about each data types in detail.StringsListQuiz: List, StringTuplesDictionaryQuiz: Tuples, DictionarySetsArraysList ComprehensionQuiz:Sets, Arrays, List ComprehensionPython's collections module offers essential data structures, including the following:CountersHeapqDequeOrderedDictDefaultdictQuiz: Data StructuresTo learn data structure and algorithm with python in detail, you can refer to our DSA with Python Tutorial.4. Python OOPs ConceptsIn this section of Python OOPs, we'll explore the core principles of object-oriented programming (OOP) in Python. From encapsulation to inheritance, polymorphism, abstract classes and iterators, we'll cover the essential concepts that helps you to build modular, reusable and scalable code. Classes and ObjectsPolymorphismInheritanceAbstractEncapsulationIteratorsQuiz:OOPs5. Python Exception HandlingIn this section of Python Tutorial, we'll explore Python Exception Handling that how Python deals with unexpected errors, enabling us to write fault-tolerant code. We'll cover file handling, including reading from and writing to files.Exception handlingTry and ExceptBuilt-in ExceptionUser defined ExceptionQuiz:Exception Handling6. File HandlingIn this section, we will cover file handling, including reading from and writing to files.File HandlingDifferent File ModesRead FilesWrite/Create FilesOS Modulepathlib ModuleDirectory ManagementQuiz:File Handling7. Python Database HandlingIn this section we will learn how to access and work with MySQL and MongoDB databasesPython MongoDB TutorialPython MySQL Tutorial8. Python Packages or LibrariesPython is a huge collection of Python Packages standard libraries that make development easier. These libraries help with a wide range of tasks and can save you a lot of time by providing ready-to-use tools.Some commonly used types of libraries in Python include:Built-in Modules in PythonPython DSA LibrariesPython GUI Libraries9. Data Science with Python1. Foundational Libraries: These are the libraries that form the base for all data science work. Start here to build a strong foundation.NumPyPandasMatplotlib2. Advanced Visualization and Statistical Tools: Once you’re comfortable with basic data handling and visualization, move to creating cleaner visuals and performing statistical analysis.SeabornStatsmodel3. Machine Learning Libraries: After data manipulation and visualization, learn machine learning, starting with simpler models and moving to advanced ones.Scikit-learnXGBoost /LightGBM4. Deep Learning Frameworks: If you’re interested in AI and deep learning, these libraries will allow you to build and train neural networks.TensorFlow and KerasPyTorchTo learn more, you can refer to Python for Data Science.10. Web Development with Python1. Core Web Frameworks (Backend Development with Python): These are the tools for building Python-based web applications.FlaskDjango2. Database Integration: Learn how to connect Python web frameworks to databases for storing and retrieving data.SQLiteSQLAlchemyDjango ORM3. Front-End and Backend Integration: Learn how to connect Python backends with front-end technologies to create dynamic, full-stack web applications.Jinja2 (Flask)Django Templates4. API Development: Learn to build APIs (Application Programming Interfaces) for connecting your backend with front-end apps or other services.Flask-RESTfulDjango REST Framework (DRF)To learn more, you can refer to Python for Web Development.Python QuizzesPython quiz page covers topics including variables, data types and how to manage output effectively. You'll explore operators and control flow to structure our code, along with loops (for and while) for repetitive tasks. Additionally, you'll gain knowledge with Python data structures such as lists, tuples, dictionaries and sets.QuizzesPython PracticeThe Python Coding Practice Problems page offers exercises for all skill levels, covering basics, loops, functions and OOP. You'll work with lists, strings, dictionaries, sets and advanced structures like heaps and deques. These problems help build a strong foundation and boost confidence in solving real-world coding challenges.Python Coding ProblemsFeatures of PythonPython stands out because of its simplicity and versatility, making it a top choice for both beginners and professionals. Here are some key features or characteristics:Easy to Read and Write: Python’s syntax is clean and simple, making the code easy to understand and write. It is suitable for beginners.Interpreted Language: Python executes code line by line, which helps in easy debugging and testing during development.Object-Oriented and Functional: Python supports both object-oriented and functional programming, giving developers flexibility in how they structure their code.Dynamically Typed: You don’t need to specify data types when declaring variables; Python figures it out automatically.Extensive Libraries: Python has a rich collection of libraries for tasks like web development, data analysis, machine learning and more.Cross-Platform: Python can run on different operating systems like Windows, macOS and Linux without modification.Community Support: Python has a large, active community that continuously contributes resources, libraries and tools, making it easier to find help or solutions. This Python tutorial is updated based on latest Python 3.13.1 version.Applications of PythonWeb Development: Frameworks like Django and Flask can be used to create dynamic websites and web applications quickly and efficiently.Data Science & Analysis: Python is most preferred language for data analysis, visualization and handling large datasets. Because of extensive libraries like Pandas, NumPy and Matplotlib.Machine Learning & AI: Python is popular in AI and machine learning because of its powerful libraries like TensorFlow, Keras and Scikit-learn.Scripting & Automation: Python’s simplicity makes it ideal for writing scripts that automate tasks in different systems, from server management to file handling. Python is commonly used to automate repetitive tasks, making processes faster and more efficient.Web Scraping: Libraries like Beautiful Soup and Scrapy.Desktop App Development: Python can be used to build desktop applications using frameworks like Tkinter and PyQt. Python is also used for game development, with libraries like Pygame to create simple games.Python vs. Other Programming LanguagesBelow is the comparison of Python with C, C++ and Java:FeaturePythonC/C++JavaScriptJavaTypeInterpretedCompiledInterpretedCompiled and Interpreted ParadigmMulti-paradigm (object-oriented, procedural, functional)Procedural (C), Multi-paradigm (C++: object-oriented, generic)Multi-paradigm (event-driven, functional, object-oriented)Object-oriented, structuredMemory ManagementAutomaticManualAutomaticAutomaticSyntaxSimpleComplexSimpleComplexUse CasesWeb development, data analysis, machine learningSystem programming, embedded systems, game/high-performance developmentLarge-scale applications, enterprise softwareLarge-scale applications, enterprise softwareNotable Frameworks/LibrariesDjango, FlaskStandard Library, BoostSpring, HibernateSpring, HibernateCommunity SupportStrongStrongStrongStrongJob MarketAbundantAbundantAbundantAbundantList of Companies Using PythonThese are some Popular companies that use Python in their workflow:CompanyDescriptionGoogleUses Python for various applications, including their search engine and machine learning projects.InstagramThe backend of Instagram is built using Python, enabling it to handle millions of users efficiently.SpotifyPython is used for data analysis and backend services, helping improve user recommendations.DropboxPython powers the desktop client of Dropbox, making it easy to sync files across devices.NetflixPython helps Netflix with data analysis and managing its content recommendation algorithms.RedditOne of the largest online communities, Reddit, uses Python for its core functionalities.UberUber uses Python for various features, including dynamic pricing and data analysis.PinterestPython plays a key role in the backend of Pinterest, helping scale and manage user content.Career & Jobs in PythonPython offer diverse opportunities across industries, here we have listed all the best career opportunity that anyone can pursue after learning Python.CareerAverage Salary (INR) Per AnnumAverage Salary (USD) Per AnnumPython Developer₹500,000 – ₹1,200,000$60,000 – $110,000Data Scientist₹600,000 – ₹1,500,000$70,000 – $130,000Machine Learning Engineer₹700,000 – ₹1,800,000$75,000 – $140,000Full Stack Developer₹600,000 – ₹1,300,000$65,000 – $120,000DevOps Engineer₹800,000 – ₹2,000,000$80,000 – $140,000Automation Engineer₹500,000 – ₹1,200,000$55,000 – $100,000Data Analyst₹400,000 – ₹900,000$50,000 – $90,000Software Engineer₹500,000 – ₹1,500,000$65,000 – $120,000Backend Developer₹600,000 – ₹1,300,000$70,000 – $125,000AI Engineer₹900,000 – ₹2,500,000$90,000 – $160,000Python Latest & Upcoming FeaturesPython 3.13 is the most recent stable release of the programming language, featuring a blend of updates to its syntax, implementation and standard library. Key enhancements include the introduction of a revamped interactive interpreter, experimental capabilities for operating in a free-threaded mode (as outlined in PEP 703) and the addition of a Just-In-Time (JIT) compiler (detailed in PEP 744).The upcoming version of Python is Python 3.14 and it is expected to include the following notable updates: UTF-8 Mode Default (PEP 686), Shorthand Syntax for Keyword Arguments, Enhanced f-strings, JSON-based Simple API (PEP 691).--> In this tutorial, we've provided the latest Python 3.13 version compiler where you can edit and compile your written code directly with just one click of the RUN Button. So test yourself with Python first exercises. Comment More infoAdvertise with us Next Article Python Introduction kartik Follow Improve Article Tags : Python Python Programs python Tutorials Practice Tags : pythonpython",
        "code_examples": [],
        "source": "geeksforgeeks",
        "url": "https://www.geeksforgeeks.org/python-programming-language/",
        "level": "intermediate"
    },
    {
        "topic": "python",
        "title": "About us | GeeksforGeeks",
        "content": "About us About GeeksforGeeks: Company Profile and Brand: GeeksforGeeks is a comprehensive educational portal that empowers learners across domains—spanning computer science, school-level subjects, commerce, essential software tools (Excel, Word, etc.), exam preparation resources (GATE, JEE, NEET etc.), and provides them with top notch interview preparation services. With over 50 million registered users globally, and millions of daily visitors, GfG provides a vast and growing collection of tutorials, interview guides, concept explainers, coding challenges, practice problems, and structured courses, catering to both academic and professional needs. We’re especially known for our in-depth resources on interview preparation, helping thousands land roles at top tech companies with our curated content, mock interviews, and company-wise interview experiences. Our courses and learning paths for high demand technologies like DSA, System Design, Web Development, Machine Learning- are ideal for professionals aiming to level up or switch domains. Our certifications ensure to add credibility and enhance our learners’ career prospects. Our content is created and curated by top mentors from renowned institutions and organizations, ensuring quality and relevance. With a focus on clarity, accessibility, and impact, we help students and professionals alike turn curiosity into expertise. GeeksforGeeks has become a trusted name in education—offering well-structured tutorials, hands-on practice problems, conceptual articles, and guided courses. At GeeksforGeeks, we’re more than just a platform—we’re a community. A space to learn, grow, and stay ahead in an ever-evolving world of education and technology. Corporate History, Mission, Vision, and Motto: Corporate History:Founded in 2008 by Mr. Sandeep Jain, a visionary computer science educator, GeeksforGeeks began as a platform to simplify complex coding concepts. Over the years, it has evolved into a full-spectrum educational portal—supporting learners not only in programming but also in academics, skill-building, and professional growth. Mission:To empower learners across domains by providing accessible, high-quality educational content that bridges the gap between theory and practical application—helping them excel in academics, careers, and beyond. Vision:To be the most comprehensive, inclusive, and trusted learning platform—enabling individuals from all walks of life to access knowledge, gain confidence, and succeed in their educational and career journeys. Motto:“Learn, Practice, and Excel” – A commitment to lifelong learning, hands-on experience, and achieving personal growth, no matter the field. Company Founder: Our founder Sandeep Jain is a visionary entrepreneur and esteemed computer science expert. Fueled by his unwavering passion for coding and education, laid the very bedrock upon which GeeksforGeeks stands today, and his indomitable spirit has been instrumental in its remarkable growth and resounding success. As the steadfast driving force behind the company, Sandeep remains a beacon of guidance and inspiration, propelling the team to constantly challenging limits and craft transformative learning experiences.",
        "code_examples": [],
        "source": "geeksforgeeks",
        "url": "https://www.geeksforgeeks.org/about/",
        "level": "intermediate"
    },
    {
        "topic": "python",
        "title": "OS Module in Python with Examples | GeeksforGeeks",
        "content": "OS Module in Python with Examples Last Updated : 01 Aug, 2024 Comments Improve Suggest changes Like Article Like Report The OS module in Python provides functions for interacting with the operating system. OS comes under Python’s standard utility modules. This module provides a portable way of using operating system-dependent functionality. The *os* and *os.path* modules include many functions to interact with the file system. Python-OS-Module FunctionsHere we will discuss some important functions of the Python os module : Handling the Current Working DirectoryCreating a DirectoryListing out Files and Directories with PythonDeleting Directory or Files using PythonHandling the Current Working DirectoryConsider Current Working Directory(CWD) as a folder, where Python is operating. Whenever the files are called only by their name, Python assumes that it starts in the CWD which means that name-only reference will be successful only if the file is in the Python’s CWD. Note: The folder where the Python script is running is known as the Current Directory. This is not the path where the Python script is located. Getting the Current working directoryTo get the location of the current working directory os.getcwd() is used. Example: This code uses the ‘os' module to get and print the current working directory (CWD) of the Python script. It retrieves the CWD using the ‘os.getcwd()' and then prints it to the console. Python import os cwd = os.getcwd() print(\"Current working directory:\", cwd) Output: Current working directory: /home/nikhil/Desktop/gfgChanging the Current working directoryTo change the current working directory(CWD) os.chdir() method is used. This method changes the CWD to a specified path. It only takes a single argument as a new directory path. Note: The current working directory is the folder in which the Python script is operating. Example: The code checks and displays the current working directory (CWD) twice: before and after changing the directory up one level using os.chdir('../'). It provides a simple example of how to work with the current working directory in Python. Python import os def current_path(): print(\"Current working directory before\") print(os.getcwd()) print() current_path() os.chdir('../') current_path() Output: Current working directory beforeC:\\Users\\Nikhil Aggarwal\\Desktop\\gfgCurrent working directory afterC:\\Users\\Nikhil Aggarwal\\DesktopCreating a DirectoryThere are different methods available in the OS module for creating a directory. These are – os.mkdir()os.makedirs()Using os.mkdir()By using os.mkdir() method in Python is used to create a directory named path with the specified numeric mode. This method raises FileExistsError if the directory to be created already exists. Example: This code creates two directories: “GeeksforGeeks” within the “D:/Pycharm projects/” directory and “Geeks” within the “D:/Pycharm projects” directory. The first directory is created using the os.mkdir() method without specifying the mode. The second directory is created using the same method, but a specific mode (0o666) is provided, which grants read and write permissions. The code then prints messages to indicate that the directories have been created. Python import os directory = \"GeeksforGeeks\" parent_dir = \"D:/Pycharm projects/\" path = os.path.join(parent_dir, directory) os.mkdir(path) print(\"Directory '% s' created\" % directory) directory = \"Geeks\" parent_dir = \"D:/Pycharm projects\" mode = 0o666 path = os.path.join(parent_dir, directory) os.mkdir(path, mode) print(\"Directory '% s' created\" % directory) Output: Directory 'GeeksforGeeks' createdDirectory 'Geeks' createdUsing os.makedirs()os.makedirs() method in Python is used to create a directory recursively. That means while making leaf directory if any intermediate-level directory is missing, os.makedirs() method will create them all. Example: This code creates two directories, “Nikhil” and “c”, within different parent directories. It uses the os.makedirs function to ensure that parent directories are created if they don’t exist. It also sets the permissions for the “c” directory. The code prints messages to confirm the creation of these directories Python import os directory = \"Nikhil\" parent_dir = \"D:/Pycharm projects/GeeksForGeeks/Authors\" path = os.path.join(parent_dir, directory) os.makedirs(path) print(\"Directory '% s' created\" % directory) directory = \"c\" parent_dir = \"D:/Pycharm projects/GeeksforGeeks/a/b\" mode = 0o666 path = os.path.join(parent_dir, directory) os.makedirs(path, mode) print(\"Directory '% s' created\" % directory) Output: Directory 'Nikhil' createdDirectory 'c' createdListing out Files and Directories with PythonThere is os.listdir() method in Python is used to get the list of all files and directories in the specified directory. If we don’t specify any directory, then the list of files and directories in the current working directory will be returned. Example: This code lists all the files and directories in the root directory (“/”). It uses the os.listdir function to get the list of files and directories in the specified path and then prints the results. Python import os path = \"/\" dir_list = os.listdir(path) print(\"Files and directories in '\", path, \"' :\") print(dir_list) Output: Files and directories in ' / ' :['sys', 'run', 'tmp', 'boot', 'mnt', 'dev', 'proc', 'var', 'bin', 'lib64', 'usr', 'lib', 'srv', 'home', 'etc', 'opt', 'sbin', 'media']Deleting Directory or Files using PythonOS module provides different methods for removing directories and files in Python. These are – Using os.remove()Using os.rmdir()Using os.remove() Methodos.remove() method in Python is used to remove or delete a file path. This method can not remove or delete a directory. If the specified path is a directory then OSError will be raised by the method. Example: Suppose the file contained in the folder are: This code removes a file named “file1.txt” from the specified location “D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/”. It uses the os.remove function to delete the file at the specified path. Python import os file = 'file1.txt' location = \"D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/\" path = os.path.join(location, file) os.remove(path) Output: Using os.rmdir()os.rmdir() method in Python is used to remove or delete an empty directory. OSError will be raised if the specified path is not an empty directory. Example: Suppose the directories are This code attempts to remove a directory named “Geeks” located at “D:/Pycharm projects/”. It uses the os.rmdir function to delete the directory. If the directory is empty, it will be removed. If it contains files or subdirectories, you may encounter an error. Python import os directory = \"Geeks\" parent = \"D:/Pycharm projects/\" path = os.path.join(parent, directory) os.rmdir(path) Output: Commonly Used FunctionsUsing os.name functionThis function gives the name of the operating system dependent module imported. The following names have currently been registered: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’ and ‘riscos’. Python import os print(os.name) Output: posixNote: It may give different output on different interpreters, such as ‘posix’ when you run the code here. Using os.error FunctionAll functions in this module raise OSError in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. os.error is an alias for built-in OSError exception. This code reads the contents of a file named ‘GFG.txt’. It uses a ‘try…except‘ block to handle potential errors, particularly the ‘IOError‘ that may occur if there’s a problem reading the file. If an error occurs, it will print a message saying, “Problem reading: GFG.txt.” Python import os try: filename = 'GFG.txt' f = open(filename, 'rU') text = f.read() f.close() except IOError: print('Problem reading: ' + filename) Output: Problem reading: GFG.txtUsing os.popen() FunctionThis method opens a pipe to or from command. The return value can be read or written depending on whether the mode is ‘r’ or ‘w’. Syntax: os.popen(command[, mode[, bufsize]])Parameters mode & bufsize are not necessary parameters, if not provided, default ‘r’ is taken for mode. This code opens a file named ‘GFG.txt’ in write mode, writes “Hello” to it, and then reads and prints its contents. The use of os.popen is not recommended, and standard file operations are used for these tasks. Python import os fd = \"GFG.txt\" file = open(fd, 'w') file.write(\"Hello\") file.close() file = open(fd, 'r') text = file.read() print(text) file = os.popen(fd, 'w') file.write(\"Hello\") Output: HelloNote: Output for popen() will not be shown, there would be direct changes into the file. Using os.close() FunctionClose file descriptor fd. A file opened using open(), can be closed by close()only. But file opened through os.popen(), can be closed with close() or os.close(). If we try closing a file opened with open(), using os.close(), Python would throw TypeError. Python import os fd = \"GFG.txt\" file = open(fd, 'r') text = file.read() print(text) os.close(file) Output: Traceback (most recent call last): File \"C:\\Users\\GFG\\Desktop\\GeeksForGeeksOSFile.py\", line 6, in os.close(file)TypeError: an integer is required (got type _io.TextIOWrapper)Note: The same error may not be thrown, due to the non-existent file or permission privilege. Using os.rename() FunctionA file old.txt can be renamed to new.txt, using the function os.rename(). The name of the file changes only if, the file exists and the user has sufficient privilege permission to change the file. Python import os fd = \"GFG.txt\" os.rename(fd,'New.txt') os.rename(fd,'New.txt') Output: Traceback (most recent call last): File \"C:\\Users\\GFG\\Desktop\\ModuleOS\\GeeksForGeeksOSFile.py\", line 3, in os.rename(fd,'New.txt')FileNotFoundError: [WinError 2] The system cannot find thefile specified: 'GFG.txt' -> 'New.txt' A file name “GFG.txt” exists, thus when os.rename() is used the first time, the file gets renamed. Upon calling the function os.rename() second time, file “New.txt” exists and not “GFG.txt” thus Python throws FileNotFoundError. Using os.remove() FunctionUsing the Os module we can remove a file in our system using the os.remove() method. To remove a file we need to pass the name of the file as a parameter. Python import os #importing os module. os.remove(\"file_name.txt\") #removing the file. The OS module provides us a layer of abstraction between us and the operating system. When we are working with os module always specify the absolute path depending upon the operating system the code can run on any os but we need to change the path exactly. If you try to remove a file that does not exist you will get FileNotFoundError. Using os.path.exists() FunctionThis method will check whether a file exists or not by passing the name of the file as a parameter. OS module has a sub-module named PATH by using which we can perform many more functions. Python import os #importing os module result = os.path.exists(\"file_name\") #giving the name of the file as a parameter. print(result) Output: FalseAs in the above code, the file does not exist it will give output False. If the file exists it will give us output True. Using os.path.getsize() FunctionIn os.path.getsize() function, python will give us the size of the file in bytes. To use this method we need to pass the name of the file as a parameter. Python import os #importing os module size = os.path.getsize(\"filename\") print(\"Size of the file is\", size,\" bytes.\") Output: Size of the file is 192 bytes. Comment More infoAdvertise with us Next Article Generating Random id's using UUID in Python P Piyush Doorwar Improve Article Tags : Python python-modules python-os-module Practice Tags : python",
        "code_examples": [],
        "source": "geeksforgeeks",
        "url": "https://www.geeksforgeeks.org/os-module-python-examples/",
        "level": "intermediate"
    },
    {
        "topic": "data structures",
        "title": "Data Structures Tutorial | GeeksforGeeks",
        "content": "Data Structures Tutorial Last Updated : 12 Apr, 2025 Comments Improve Suggest changes Like Article Like Report Data structures are the fundamental building blocks of computer programming. They define how data is organized, stored, and manipulated within a program. Understanding data structures is very important for developing efficient and effective algorithms. What is Data Structure?A data structure is a storage that is used to store and organize data. It is a way of arranging data on a computer so that it can be accessed and updated efficiently.A data structure is not only used for organizing the data. It is also used for processing, retrieving, and storing data. There are different basic and advanced types of data structures that are used in almost every program or software system that has been developed. So we must have good knowledge about data structures. Classification of Data StructureClassification of Data StructureLinear Data Structure: Data structure in which data elements are arranged sequentially or linearly, where each element is attached to its previous and next adjacent elements, is called a linear data structure. Example: Array, Stack, Queue, Linked List, etc.Static Data Structure: Static data structure has a fixed memory size. It is easier to access the elements in a static data structure. Example: array.Dynamic Data Structure: In dynamic data structure, the size is not fixed. It can be randomly updated during the runtime which may be considered efficient concerning the memory (space) complexity of the code. Example: Queue, Stack, etc.Non-Linear Data Structure: Data structures where data elements are not placed sequentially or linearly are called non-linear data structures. In a non-linear data structure, we can’t traverse all the elements in a single run only. Examples: Trees and Graphs.Please refer Complete Data Structures & Algorithms Tutorial for topic-wise guide, practice problems and interview questions. Comment More infoAdvertise with us Next Article LMNs-Data Structures H harendrakumar123 Follow Improve Article Tags : Advanced Data Structure Data Structures DSA Practice Tags : Advanced Data StructureData Structures",
        "code_examples": [],
        "source": "geeksforgeeks",
        "url": "https://www.geeksforgeeks.org/data-structures/",
        "level": "advanced"
    },
    {
        "topic": "data structures",
        "title": "About us | GeeksforGeeks",
        "content": "About us About GeeksforGeeks: Company Profile and Brand: GeeksforGeeks is a comprehensive educational portal that empowers learners across domains—spanning computer science, school-level subjects, commerce, essential software tools (Excel, Word, etc.), exam preparation resources (GATE, JEE, NEET etc.), and provides them with top notch interview preparation services. With over 50 million registered users globally, and millions of daily visitors, GfG provides a vast and growing collection of tutorials, interview guides, concept explainers, coding challenges, practice problems, and structured courses, catering to both academic and professional needs. We’re especially known for our in-depth resources on interview preparation, helping thousands land roles at top tech companies with our curated content, mock interviews, and company-wise interview experiences. Our courses and learning paths for high demand technologies like DSA, System Design, Web Development, Machine Learning- are ideal for professionals aiming to level up or switch domains. Our certifications ensure to add credibility and enhance our learners’ career prospects. Our content is created and curated by top mentors from renowned institutions and organizations, ensuring quality and relevance. With a focus on clarity, accessibility, and impact, we help students and professionals alike turn curiosity into expertise. GeeksforGeeks has become a trusted name in education—offering well-structured tutorials, hands-on practice problems, conceptual articles, and guided courses. At GeeksforGeeks, we’re more than just a platform—we’re a community. A space to learn, grow, and stay ahead in an ever-evolving world of education and technology. Corporate History, Mission, Vision, and Motto: Corporate History:Founded in 2008 by Mr. Sandeep Jain, a visionary computer science educator, GeeksforGeeks began as a platform to simplify complex coding concepts. Over the years, it has evolved into a full-spectrum educational portal—supporting learners not only in programming but also in academics, skill-building, and professional growth. Mission:To empower learners across domains by providing accessible, high-quality educational content that bridges the gap between theory and practical application—helping them excel in academics, careers, and beyond. Vision:To be the most comprehensive, inclusive, and trusted learning platform—enabling individuals from all walks of life to access knowledge, gain confidence, and succeed in their educational and career journeys. Motto:“Learn, Practice, and Excel” – A commitment to lifelong learning, hands-on experience, and achieving personal growth, no matter the field. Company Founder: Our founder Sandeep Jain is a visionary entrepreneur and esteemed computer science expert. Fueled by his unwavering passion for coding and education, laid the very bedrock upon which GeeksforGeeks stands today, and his indomitable spirit has been instrumental in its remarkable growth and resounding success. As the steadfast driving force behind the company, Sandeep remains a beacon of guidance and inspiration, propelling the team to constantly challenging limits and craft transformative learning experiences.",
        "code_examples": [],
        "source": "geeksforgeeks",
        "url": "https://www.geeksforgeeks.org/about/",
        "level": "advanced"
    },
    {
        "topic": "algorithms",
        "title": "Algorithms Tutorial | GeeksforGeeks",
        "content": "Algorithms Tutorial Last Updated : 12 Apr, 2025 Comments Improve Suggest changes Like Article Like Report Algorithm is a step-by-step procedure for solving a problem or accomplishing a task. In the context of data structures and algorithms, it is a set of well-defined instructions for performing a specific computational task. Algorithms are fundamental to computer science and play a very important role in designing efficient solutions for various problems. Understanding algorithms is essential for anyone interested in mastering data structures and algorithms.What is an Algorithm?An algorithm is a finite sequence of well-defined instructions that can be used to solve a computational problem. It provides a step-by-step procedure that convert an input into a desired output.Algorithms typically follow a logical structure:Input: The algorithm receives input data.Processing: The algorithm performs a series of operations on the input data.Output: The algorithm produces the desired output.What is the Need for Algorithms?Algorithms are essential for solving complex computational problems efficiently and effectively. They provide a systematic approach to:Solving problems: Algorithms break down problems into smaller, manageable steps.Optimizing solutions: Algorithms find the best or near-optimal solutions to problems.Automating tasks: Algorithms can automate repetitive or complex tasks, saving time and effort.Please refer Complete Data Structures & Algorithms Tutorial for topic-wise guide, practice problems and interview questions. Comment More infoAdvertise with us Next Article LMNs- Algorithms H harendrakumar123 Follow Improve Article Tags : Algorithms DSA Practice Tags : Algorithms",
        "code_examples": [],
        "source": "geeksforgeeks",
        "url": "https://www.geeksforgeeks.org/fundamentals-of-algorithms/",
        "level": "advanced"
    },
    {
        "topic": "algorithms",
        "title": "About us | GeeksforGeeks",
        "content": "About us About GeeksforGeeks: Company Profile and Brand: GeeksforGeeks is a comprehensive educational portal that empowers learners across domains—spanning computer science, school-level subjects, commerce, essential software tools (Excel, Word, etc.), exam preparation resources (GATE, JEE, NEET etc.), and provides them with top notch interview preparation services. With over 50 million registered users globally, and millions of daily visitors, GfG provides a vast and growing collection of tutorials, interview guides, concept explainers, coding challenges, practice problems, and structured courses, catering to both academic and professional needs. We’re especially known for our in-depth resources on interview preparation, helping thousands land roles at top tech companies with our curated content, mock interviews, and company-wise interview experiences. Our courses and learning paths for high demand technologies like DSA, System Design, Web Development, Machine Learning- are ideal for professionals aiming to level up or switch domains. Our certifications ensure to add credibility and enhance our learners’ career prospects. Our content is created and curated by top mentors from renowned institutions and organizations, ensuring quality and relevance. With a focus on clarity, accessibility, and impact, we help students and professionals alike turn curiosity into expertise. GeeksforGeeks has become a trusted name in education—offering well-structured tutorials, hands-on practice problems, conceptual articles, and guided courses. At GeeksforGeeks, we’re more than just a platform—we’re a community. A space to learn, grow, and stay ahead in an ever-evolving world of education and technology. Corporate History, Mission, Vision, and Motto: Corporate History:Founded in 2008 by Mr. Sandeep Jain, a visionary computer science educator, GeeksforGeeks began as a platform to simplify complex coding concepts. Over the years, it has evolved into a full-spectrum educational portal—supporting learners not only in programming but also in academics, skill-building, and professional growth. Mission:To empower learners across domains by providing accessible, high-quality educational content that bridges the gap between theory and practical application—helping them excel in academics, careers, and beyond. Vision:To be the most comprehensive, inclusive, and trusted learning platform—enabling individuals from all walks of life to access knowledge, gain confidence, and succeed in their educational and career journeys. Motto:“Learn, Practice, and Excel” – A commitment to lifelong learning, hands-on experience, and achieving personal growth, no matter the field. Company Founder: Our founder Sandeep Jain is a visionary entrepreneur and esteemed computer science expert. Fueled by his unwavering passion for coding and education, laid the very bedrock upon which GeeksforGeeks stands today, and his indomitable spirit has been instrumental in its remarkable growth and resounding success. As the steadfast driving force behind the company, Sandeep remains a beacon of guidance and inspiration, propelling the team to constantly challenging limits and craft transformative learning experiences.",
        "code_examples": [],
        "source": "geeksforgeeks",
        "url": "https://www.geeksforgeeks.org/about/",
        "level": "advanced"
    },
    {
        "topic": "java",
        "title": "Java Tutorial",
        "content": "Java Tutorial ❮ Home Next ❯ Learn Java Java is a popular programming language. Java is used to develop mobile apps, web apps, desktop apps, games and much more. Start learning Java now » Examples in Each Chapter Our \"Try it Yourself\" editor makes it easy to learn Java. You can edit Java code and view the result in your browser. ExampleGet your own Java Server Try it Yourself » Click on the \"Run example\" button to see how it works. We recommend reading this tutorial, in the sequence listed in the left menu. Java is an object oriented language and some concepts may be new. Take breaks when needed, and go over the examples as many times as needed. Java Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Java Exercises Java Quiz Test your Java skills with a quiz. Start Java Quiz Learn by Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Java Examples Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Java Reference You will also find complete keyword and method references: Java Keywords Java String Methods Java Math Methods Java Output Methods Java Arrays Methods Java ArrayList Methods Java LinkedList Methods Java HashMap Methods Java Scanner Methods Java Iterator Methods Java Errors and Exception Types Download Java Download Java from the official Java web site: https://www.oracle.com Kickstart your career Get certified by completing the JAVA course Get certified ❮ Home Next ❯ ★ +1\n\nJava Math nextAfter() Method ❮ Math Methods ExampleGet your own Java Server Find the next floating point number for different numbers in different directions: Try it Yourself » Definition and Usage The method returns the floating point number adjacent to a number x in the direction of a number y. If y is greater than x then it looks for the lowest possible floating point number that is greater than x. If y is less than x then it looks for the highest possible floating point number that is less than x. If y is equal to x then this method returns x.The return value for type arguments will be closer to x than the return value for type arguments. Syntax One of the following: Parameter Values Parameter Description x Required. The number to start from. y Required. The direction to step towards. Technical Details Returns: A or value representing the next floating point number from a starting point in a specified direction. Java version: 1.6+ ❮ Math Methods ★ +1",
        "code_examples": [
            "public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}",
            "public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}",
            "public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n  }\n}",
            "Code Editor",
            "Play a Code Game",
            "Code Editor",
            "Play a Code Game",
            "Code Editor",
            "Play a Code Game",
            "Code Editor (Try it)\n                      With our online code editor, you can edit code and view\n                      the result in your browser",
            "Code Game\n                      W3Schools Coding Game! Help the lynx collect pine cones",
            "System.out.println(Math.nextAfter(1, 2));\nSystem.out.println(Math.nextAfter(1, 0));\nSystem.out.println(Math.nextAfter(0.5f, 1.0f));\nSystem.out.println(Math.nextAfter(0.5f, 0.0f));",
            "public static double nextAfter(double x, double y)",
            "public static float nextAfter(float x, double y)",
            "System.out.println(Math.nextAfter(1, 2));\nSystem.out.println(Math.nextAfter(1, 0));\nSystem.out.println(Math.nextAfter(0.5f, 1.0f));\nSystem.out.println(Math.nextAfter(0.5f, 0.0f));",
            "public static double nextAfter(double x, double y)",
            "public static float nextAfter(float x, double y)",
            "System.out.println(Math.nextAfter(1, 2));\nSystem.out.println(Math.nextAfter(1, 0));\nSystem.out.println(Math.nextAfter(0.5f, 1.0f));\nSystem.out.println(Math.nextAfter(0.5f, 0.0f));",
            "nextAfter()",
            "public static double nextAfter(double x, double y)",
            "public static float nextAfter(float x, double y)",
            "Code Editor",
            "Play a Code Game",
            "Code Editor",
            "Play a Code Game",
            "Code Editor",
            "Play a Code Game",
            "Code Editor (Try it)\n                      With our online code editor, you can edit code and view\n                      the result in your browser",
            "Code Game\n                      W3Schools Coding Game! Help the lynx collect pine cones",
            "nextAfter()"
        ],
        "source": "web_search",
        "url": "https://www.w3schools.com/java/",
        "level": "beginner"
    },
    {
        "topic": "java",
        "title": "Java Tutorial | GeeksforGeeks",
        "content": "Java Tutorial Last Updated : 05 May, 2025 Comments Improve Suggest changes 284 Likes Like Report Java is a high-level, object-oriented programming language used to build applications across platforms—from web and mobile apps to enterprise software. It is known for its Write Once, Run Anywhere capability, meaning code written in Java can run on any device that supports the Java Virtual Machine (JVM).Java shares similarities with other C-based languages like C++ and C#, especially in terms of syntax and structure. Its robustness, cross-platform compatibility, and strong memory management have made it a go-to language for developers worldwide for over two decades. 2 / 9 This Java tutorial is designed for both beginners and experienced professionals, covering basic to advanced Java topics.What is Java Used For?Java is one of the most popular and widely used programming language:Used to develop mobile apps, desktop apps, web apps, web servers, games, and enterprise-level systems. Java was invented by James Gosling and Oracle currently owns it.JDK 23 is the latest version of Java. Java's syntax is similar to C/C++. Popular platforms like LinkedIn, Amazon, and Netflix rely on Java for their back-end architecture, showcasing its stability and scalability across different environments. Popularity is so high that 3 Billion+ devices use Java across the world. Java Hello World Program Java 9123456789Java File Naming ConventionsWhen writing a Java program, we should follow the below rules:The file name must match with the public class name.Java is case sensitive, so Geeks.java is not equal to geeks.java.If a file has no \"public\" class, the file name can be anything but it should be matched with the primary class name.Java BasicsJava basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals. Mastering these fundamentals is key to building strong, error-free Java applications:What is Java?Download and Install Java?JDK vs JRE vs JVMIdentifiersKeywordsQuiz: Java Basics and IdentifiersData TypesVariablesOperatorsQuiz: Variables, OperatorDecision Making (if, if-else, switch, break, continue, jump)LoopsQuiz: Control Statements and LoopsJava MethodsJava methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier:Introduction to MethodsHow to Call Methods?Static Methods vs Instance MethodsAccess ModifiersCommand Line ArgumentsVariable Arguments (Varargs)Quiz: MethodsJava ArraysJava arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions:Introduction to ArraysDeclare and Initialize ArraysMulti-Dimensional ArraysQuiz: Java ArraysJagged ArraysArrays ClassFinal ArraysJava Array ProgramsQuiz:Array ProgramsJava StringsJava Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed:Introduction of StringsWhy Strings are Immutable?Java String ConcatenationQuiz: String BasicsString ClassStringBuffer ClassStringBuilder ClassQuiz:String ClassesStrings vs StringBuffer vs StringBuilderJava String ProgramsJava OOPs ConceptsJava follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable:What are OOPs Concepts?Classes and ObjectsQuiz: Classes and ObjectsConstructorsQuiz: ConstructorsObject ClassAbstractionEncapsulationInheritanceQuiz: Inheritance and AbstractionPolymorphismCompile-Time Polymorphism (Method Overloading)Runtime Polymorphism (Method Overriding)PackagesQuiz: Polymorphism and PackagesJava InterfacesJava interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach:Java InterfacesInterfaces and InheritanceClass vs InterfaceQuiz:InterfacesFunctional InterfaceNested InterfaceMarker InterfaceComparator InterfaceQuiz: Interface types and ComparatorJava CollectionsJava Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap:Java Collection FrameworkCollections ClassCollection InterfaceQuiz: Collection FrameworkList InterfaceQuiz: List InterfaceArrayList ClassQuiz:ArrayListVector ClassQuiz: VectorLinkedList ClassQuiz: LinkedListStack ClassSet InterfaceHashSet ClassQuiz: Set and HashSetTreeSet ClassLinkedHashSet ClassQueue InterfacePriority Queue ClassDeque InterfaceMap InterfaceHashMap ClassLinkedHashMap ClassQuiz:Queue and Map InterfaceHashTable ClassQuiz: HashtableDictionarySortedSet InterfaceComparator InterfaceComparable InterfaceComparator vs ComparableQuiz: Comparator vs ComparableIteratorQuiz:IteratorsJava Exception Handlingava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions:Java ExceptionsChecked vs Unchecked ExceptionsTry Catch BlockQuiz: Java ExceptionsFinal, Finally and FinalizeThrow and ThrowsCustomized Exception HandlingChained ExceptionsNull Pointer ExceptionsException Handling with Method OverridingQuiz: Exception HandlingJava Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks like parallel processing and responsive applications:Introduction to Java MultithreadingThreadsThread ClassRunnable InterfaceQuiz: Thread Basics and LifecycleLifecycle and States of a ThreadMain ThreadThread Priority in MultithreadingNaming & Feteching Name of Current ThreadThread.start() vs Thread.run() MethodThread.sleep() MethodDaemon ThreadQuiz: Thread Methods and Daemon ThreadsThread SafetyThread PoolsJava File HandlingJava File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the and packages for efficient file operations:File HandlingFile ClassCreate FilesRead FilesQuiz:File HandlingWrite on FilesDelete FileFileReader ClassFileWriter ClassQuiz:File WritingFilePermission ClassFileDescriptor ClassJava Streams and Lambda ExpressionsJava Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data:Lambda ExpressionsMethod ReferencesJava Stream - Complete TutorialQuiz:Lambda Expressions and StreamsJava 8 Features - Complete TutorialJava IOJava IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the package and supports both byte and character streams:Introduction to Java IOReader ClassWriter ClassFileInput StreamQuiz: IO BasicsFileOutput StreamBufferedReader Input StreamBufferedReader Output streamBufferedReader vs ScannerFast I/OQuiz: BufferedReader vs Scanner and Fast I/OJava SynchronizationJava Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency:Java SynchronizationImportance of Thread SynchronizationMethod and Block SynchronizationQuiz: Synchronization BasicsAtomic vs Volatile vs Synchronized Local Frameworks vs Thread SynchronizationDeadlock in MultithreadingQuiz: Deadlocks and SynchronizationDeadlock Prevention and AvoidanceLock vs Monitor in ConcurrencyReentrant LockQuiz: Concurrency Locks and Reentrant LocksJava RegexJava Regex (Regular Expressions) allows pattern matching and text manipulation using the package. It is powerful for validating, searching, and replacing strings based on specific patterns:What is Java Regex?Pattern ClassMatcher ClassCharacter ClassQuiz: Regex Basics and Pattern MatchingQuantifiersJava NetworkingJava Networking enables communication between devices over a network using classes from the package. It supports protocols like TCP and UDP for building client-server applications and data exchange:Introduction to Java NetworkingTCP ArchitectureUDP ArchitectureIPV4 vs IPV6Quiz: Networking Basics and ProtocolsConnection-Oriented vs Connectionless ProtocolsSocket ProgrammingServer Socket ClassQuiz: Sockets and Server CommunicationURL Class and MethodsJava Database Connectivity(JDBC)Introduction to Java JDBCJDBC DriverJDBC ConnectionTypes of Statements in JDBCQuiz: JDBCJava Memory AllocationJava Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically:Java Memory ManagementHow Java Objects Stored in Memory?Quiz: Java Memory AllocationStack vs Heap Memory AllocationQuiz: Heap vs StackJava Virtual Machine(JVM) Stack AreaTypes of Memory Areas Allocated by JVMGarbage CollectionQuiz:JVM Memory Management and Garbage CollectionTypes of JVM Garbage CollectorsHeap and Stack Memory AllocationMemory LeaksJava Interview QuestionsPrepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate:200+ Core Java Interview Questions and AnswersJava MCQBest Approach to Learn JavaHere’s the step-by-step approach to learn and master Java efficiently and effectively:1. Understand Java Fundamentals: Start with the basics: what Java is, how it works (JVM, JRE, JDK), and why it’s platform-independent. Learn about Java’s role in building desktop, web, and mobile applications.2. Set Up the Java Environment: Install the latest JDK and configure your development environment. Use a beginner-friendly IDE like IntelliJ IDEA, Eclipse, or VS Code for writing and testing your code.3. Learn Core Java Concepts: Focus on essential topics like variables, data types, operators, control structures (if-else, switch, loops), and input/output. Practice writing simple programs to strengthen your understanding.4. Master Object-Oriented Programming (OOP): Dive into the pillars of OOP—classes, objects, inheritance, polymorphism, encapsulation, and abstraction. Understand how Java handles these concepts and how to apply them effectively in real projects.5. Explore Collections and Data Structures: Learn about Java's Collection Framework—ArrayList, HashMap, Set, LinkedList, and more. Understand how to use them and when to choose one over the other.6. Work with Exception Handling: Understand the importance of error handling in Java using try-catch blocks, finally, throw, and custom exceptions. Learn best practices for writing clean, safe code.7. Get Comfortable with File I/O: Learn how Java reads from and writes to files using , , , , and . Practice creating programs that manage and manipulate file data.8. Understand Multithreading and Concurrency: Grasp the basics of threads, synchronization, and concurrent programming. Learn how Java handles multiple tasks simultaneously using the class and .9. Learn Java Libraries and APIs: Familiarize yourself with essential APIs like Java Math, Date & Time (java.time), and String manipulation. Explore popular libraries like Apache Commons, Gson, or Jackson for real-world development.10. Build Real-World Projects: Apply your knowledge by building console apps, file management systems, or basic desktop GUIs using JavaFX or Swing. Gradually move into web development with Java Servlets, JSP, or Spring Boot.Java Program ExamplesJava Programming ExamplesJava Exercises – Basic to Advanced Java Practice ProgramsJava Coding Practice ProblemsJava Fundamentals Coding Practice ProblemsJava Methods Coding Practice ProblemsJava Arrays Coding Practice ProblemsJava Strings Coding Practice ProblemsJava OOPs Coding Practice ProblemsJava Sorting and Searching Algorithms Coding Practice ProblemsJava Collections Coding Practice ProblemsJava Stream & Lambda Expression Coding Practice ProblemsJava Quizzes and MCQsJava Language MCQs with AnswersImportant Java ProjectsNumber Guessing GameSimple Banking ApplicationCurrency ConverterTic-Tac-Toe GameSnake GameMemory GameChat ApplicationFace Detection SystemSocial Networking SiteText EditorCareer & Jobs in Java 2025Java opens doors to a wide range of tech careers across industries—from enterprise software to mobile apps and cloud systems. Here’s a list of top career options for professionals with Java expertise, along with their average salary ranges:CareerAverage Salary (INR) Per AnnumAverage Salary (USD) Per AnnumJava Developer₹400,000 – ₹1,200,000$55,000 – $100,000Full Stack Java Developer₹700,000 – ₹1,800,000$75,000 – $130,000Backend Engineer (Java)₹800,000 – ₹2,000,000$80,000 – $140,000Android Developer (Java/Kotlin)₹500,000 – ₹1,500,000$60,000 – $110,000Java Architect₹1,500,000 – ₹3,000,000$120,000 – $170,000DevOps Engineer (Java projects)₹900,000 – ₹2,200,000$90,000 – $150,000Big Data Engineer (Java + Hadoop)₹1,000,000 – ₹2,500,000$100,000 – $160,000Automation Test Engineer (Java + Selenium)₹600,000 – ₹1,400,000$65,000 – $110,000Software Engineer (Java Spring Boot)₹700,000 – ₹1,800,000$75,000 – $130,000Java Consultant / Technical Lead₹1,200,000 – ₹2,800,000$110,000 – $160,000List of Companies Using JavaThese are some popular companies that use Java in thier workflow:CompanyDescriptionGoogleUses Java for Android development, backend services, and internal tools across products like Gmail and Google Drive.AmazonJava is widely used at Amazon for building scalable backend systems, AWS services, and e-commerce infrastructure.NetflixJava powers many of Netflix's backend microservices, helping deliver content to millions of users with high availability.SpotifyRelies on Java for data processing, backend APIs, and scalable microservices that support music streaming.AirbnbUses Java in its backend systems to handle listings, payments, and user interactions at scale.UberEmploys Java for real-time dispatch systems, geolocation services, and backend microservices.LinkedInJava is a core language for building LinkedIn’s backend architecture, handling data-intensive workloads and APIs.eBayUses Java for high-traffic applications, auction management, and payment services.NASAImplements Java in various projects, including simulations, data analysis tools, and mission-critical software.IntelUses Java in embedded systems, performance testing tools, and internal applications across chip development Introduction to Java kartik Improve Java Tutorials Java\n\nIntroduction to Java Last Updated : 07 Mar, 2025 Comments Improve Suggest changes 1.05k Likes Like Report Java is a class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is intended to let application developers Write Once and Run Anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java was developed by James Gosling at Sun Microsystems Inc. in May 1995 and later acquired by Oracle Corporation and is widely used for developing applications for desktop, web, and mobile devices. Java is known for its simplicity, robustness, and security features, making it a popular choice for enterprise-level applications. Java applications are compiled to byte code that can run on any Java Virtual Machine. The syntax of Java is similar to C/C++. Java makes writing, compiling, and debugging programming easy. It helps to create reusable code and modular programs. Table of Content History of JavaKey Features of JavaPlatform IndependentObject-Oriented Programming SimplicityRobustnessSecurityDistributedMultithreading Portability High Performance How Java Code Executes?Creating the ProgramCompiling the ProgramRunning the ProgramHistory of JavaJava’s history is as interesting as it is impactful. The journey of this powerful programming language began in 1991 when James Gosling, Mike Sheridan, and Patrick Naughton, a team of engineers at Sun Microsystems known as the “Green Team,” set out to create a new language initially called “Oak.” Oak was later renamed Java, inspired by Java coffee, and was first publicly released in 1996 as Java 1.0. This initial version provided a no-cost runtime environment across popular platforms, making it accessible to a broad audience. Arthur Van Hoff rewrote the Java 1.0 compiler to strictly comply with its specifications, ensuring its reliability and cross-platform capabilities. Java evolved over time, with Java 2 introducing multiple configurations tailored for different platforms, showcasing its versatility.In 1997, Sun Microsystems aimed to formalize Java through the ISO standards body but eventually withdrew from the process.Despite not formalizing through ISO, Sun Microsystems offered most Java implementations at no cost, earning revenue by licensing specialized products such as the Java Enterprise System.A significant milestone in Java’s history occurred on November 13, 2006, when Sun Microsystems released a large portion of the Java Virtual Machine (JVM) as free, open-source software.By May 8, 2007, the core JVM code was fully available under open-source distribution terms.Java was designed with core principles: simplicity, robustness, security, high performance, portability, multi-threading, and dynamic interpretation. These principles have made Java a preferred language for various applications, including mobile devices, internet programming, gaming, and e-business.Today, Java continues to be a cornerstone of modern software development, widely used across industries and platforms.If you want to know more, must read – The Complete History of Java Programming Language Key Features of Java1. Platform IndependentCompiler converts source code to byte code and then the JVM executes the bytecode generated by the compiler. This byte code can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of the byte code. That is why we call java a platform-independent language. 2. Object-Oriented Programming Java is an object-oriented language, promoting the use of objects and classes. Organizing the program in the terms of a collection of objects is a way of object-oriented programming, each of which represents an instance of the class. The four main concepts of Object-Oriented programming are: AbstractionEncapsulationInheritancePolymorphism3. SimplicityJava’s syntax is simple and easy to learn, especially for those familiar with C or C++. It eliminates complex features like pointers and multiple inheritances, making it easier to write, debug, and maintain code. 4. RobustnessJava language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, exception handling, and memory allocation. 5. SecurityIn java, we don’t have pointers, so we cannot access out-of-bound arraysi.e it shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. Also, java programs run in an environment that is independent of the os(operating system) environment which makes java programs more secure. 6.DistributedWe can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection. Java supports multithreading, enabling the concurrent execution of multiple parts of a program. This feature is particularly useful for applications that require high performance, such as games and real-time simulations. 8. PortabilityAs we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable. WORA(Write Once Run Anywhere) makes java application to generates a ‘.class’ file that corresponds to our applications(program) but contains code in binary format. It provides architecture-neutral ease, as bytecode is independent of any machine architecture. It is the primary reason java is used in the enterprising IT industry globally worldwide. 9. High PerformanceJava architecture is defined in such a way that it reduces overhead during the runtime and at some times java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basis where it only compiles those methods that are called making applications to execute faster. How Java Code Executes?The execution of a Java application code involves three main steps: How Java Code Executes1. Creating the ProgramJava programs are written using a text editor or an Integrated Development Environment (IDE) like IntelliJ IDEA, Eclipse, or NetBeans. The source code is saved with a extension. 2. Compiling the ProgramThe Java compiler () converts the source code into bytecode, which is stored in a file. This bytecode is platform-independent and can be executed on any machine with a JVM. 3. Running the ProgramThe JVM executes the compiled bytecode, translating it into machine code specific to the operating system and hardware. Example Program: Java 6123456Write your first Java program with ‘First Java Program: Hello World‘. Essential Java Terminologies You Need to KnowBefore learning Java, one must be familiar with these common terms of Java. 1. Java Virtual Machine(JVM)The JVM is an integral part of the Java platform, responsible for executing Java bytecode. It ensures that the output of Java programs is consistent across different platforms. Writing a program is done by a java programmer like you and me.The compilation is done by the JAVAC compiler which is a primary Java compiler included in the Java development kit (JDK). It takes the Java program as input and generates bytecode as output.In the Runningphase of a program, JVM executes the bytecode generated by the compiler.The Java Virtual Machine (JVM) is designed to run the bytecode generated by the Java compiler.Each operating system has its own version of the JVM, but all JVMs follow the same rules and standards. This means Java programs can run the same way on any device with a JVM, regardless of the operating system. This is why Java is called a platform-independent language. 2. BytecodeBytecode is the intermediate representation of Java code, generated by the Java compiler. It is platform-independent and can be executed by the JVM. 3. Java Development Kit(JDK)While we were using the term JDK when we learn about bytecode and JVM. So, as the name suggests, it is a complete Java development kit that includes everything including compiler,Java Runtime Environment (JRE), Java Debuggers, Java Docs, etc. For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program. 4. Java Runtime Environment (JRE)JDK includes JRE. JRE installation on our computers allows the java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet support, and plugins. For running the java program, a computer needs JRE. 5. Garbage CollectorIn Java, programmers can’t delete the objects. To delete or recollect that memory JVM has a program called Garbage Collector. Garbage Collectors can recollect the objects that are not referenced. So Java makes the life of a programmer easy by handling memory management. However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage cannot recover the memory of objects being referenced. 6. ClassPathThe Classpathis the file path where the java runtime and Java compiler look for .class files to load. By default, JDK provides many libraries. If you want to include external libraries they should be added to the classpath. Basically everything in java is represented in Class as an object including the main function. Platform independent: Java code can run on any platform that has a Java Virtual Machine (JVM) installed, which means that applications can be written once and run on any device.Object-Oriented: Java is an object-oriented programming language, which means that it follows the principles of encapsulation, inheritance, and polymorphism.Security: Java has built-in security features that make it a secure platform for developing applications, such as automatic memory management and type checking.Large community: Java has a large and active community of developers, which means that there is a lot of support available for learning and using the language.Enterprise-level applications: Java is widely used for developing enterprise-level applications, such as web applications, e-commerce systems, and database systems.Performance: Java can be slower compared to other programming languages, such as C++, due to its use of a virtual machine and automatic memory management.Memory management: Java’s automatic memory management can lead to slower performance and increased memory usage, which can be a drawback for some applications.Useful Resources:100 Days Of Java: A Complete Guide For Beginners7 Tips to Help You Stand Out as a Java Developer ConclusionJava is a powerful and versatile programming language that’s great for beginners and experienced developers alike. By learning the basics, like what classes, objects, and methods are, you can start creating your own programs and see how Java can be used in real-world applications. Whether you’re interested in building games, mobile apps, or websites, Java provides a solid foundation to bring your ideas to life. Remember, the more you practice, the better you’ll get. Keep exploring, and soon you’ll be writing your own Java programs with confidence! Similarities and Difference between Java and C++ G goelshubhangi3118 Improve Java java-basics Java\n\nSimilarities and Difference between Java and C++ Last Updated : 21 Apr, 2023 Comments Improve Suggest changes 288 Likes Like Report Nowadays Java and C++ programming languages are vastly used in competitive coding. Due to some awesome features, these two programming languages are widely used in industries as well as comepetitive programming . C++ is a widely popular language among coders for its efficiency, high speed, and dynamic memory utilization. Java is widely used in the IT industry’s , It is incomparable to any other programming language in terms of software development. Let us go through the various points to compare these popular coding languages: Similarities between Java and C++ 1. Execution: At compile-time, Java source code or .java file is converted into bytecode or .class file. At runtime, JVM (Java Virtual Machine) will load the .class file and will convert it to machine code with the help of an interpreter. After compilation of method calls (using the Just-In-Time (JIT) compiler), JVM will execute the optimized code. So Java is both compiled as well as an interpreted language. On the other hand, C++ executes the code by using only a compiler. The C++ compiler compiles and converts the source code into the machine code. That’s why C++ is faster than Java but not platform-independent. Below is the illustration of how Java and C++ codes are executed: The execution of a Java code is as follows: Execution of a C++ Code 2. Features: C++ and Java both have several Object Oriented programming features which provide many useful programming functionalities. Some features are supported by one and some by the other. Even though both languages use the concept of OOPs, neither can be termed 100% object-oriented languages. Java uses primitive data types and thus cannot be termed as 100% Object-Oriented Language. C++ uses some data types similar to primitive ones and can implement methods without using any data type. And thus, it is also deprived of the 100% Object-Oriented title. Below is the table which shows the features supported and not supported by both the programming languages: Syntax Difference: Syntax of c++: C++ syntax of java Java Applications: Both C++ and Java have vast areas of application. Below are the applications of both languages: Applications of C++ Programming language: Suitable for Developing large software (like passenger reservation systems). MySQL is written in C++. For fast execution, C++ is majorly used in Game Development. Google Chromium browser, file system, and cluster data processing are all written in C++. Adobe Premiere, Photoshop, and Illustrator; these popular applications are scripted in C++. Advanced Computations and Graphics- real-time physical simulations, high-performance image processing. C++ is also used in many advanced types of medical equipment like MRI machines, etc. Applications of Java Programming language: Desktop GUI Applications development. Android and Mobile application development. Applications of Java are in embedded technologies like SIM cards, disk players, TV, etc. Java EE (Enterprise Edition) provides an API and runtime environment for running large enterprise software. Network Applications and Web services like Internet connection, Web App Development. Environment: C++ is a Platform dependent while Java is a platform-independent programming language. We have to write and run C++ code on the same platform. Java has the WORA (Write Once and Run Everywhere) feature by which we can write our code in one platform once and we can run the code anywhere. Differences between Java and C++ are as follows: Setting up Environment Variables For Java - Complete Guide to Set JAVA_HOME P PinakiBanerjee0 Improve C++ Difference Between Java Write From Home CPPJava\n\nSetting up Environment Variables For Java – Complete Guide to Set JAVA_HOME Last Updated : 09 May, 2025 Comments Improve Suggest changes 333 Likes Like Report In the journey to learning the Java programming language, setting up environment variables for Java is essential because it helps the system locate the Java tools needed to run the Java programs. Now, this guide on how to setting up environment variables for Java is a one-place solution for Mac, Windows, and Linux users. Here we have discussed the step-by-step process to set the Environment variable in all three major OS. Before setting up the environment variables, the Java Development Kit (JDK) needs to be installed on your system and you must know the JDK installation directory on your system. To set Java Environment Variables, you need to set, JAVA_HOME: It points to the directory where the JDK is installed on the system. PATH: It specifies where the operating system should look for executable files. Setting the Environment Variables in Windows Download and install the latest JDK from the official Oracle website. To know how to download JDK on Windows OS, refer to this article: How to Install Java on Windows, Linux, and macOS? Step 2: Set JAVA_HOME Click Windows + S, search for “Environment Variables,” and click Edit the system environment variables. In the System Properties window, click Environment Variables. Now, go to Environment Variable > System Variable section > click New. Set JAVA_HOME In the Variable name field, enter and in the Variable value field enter the path where the JDK is installed. Click OK to save the changes. Variable name Step 3: Update the Path Variable Now we need to update the PATH variable. For this, open the C: drive, go to Program Files > Java > jdk-23 > bin folder, then copy the path. Update the Path Variable Go inside System Variables section, select the path variable. Right-click on it and choose the option Edit. In the Edit environment window, click New. System Variables Then add the path to the JDK’s bin folder (e.g., ). JDK’s Click OK to save the changes. Step 4: Check the Java Version Now to verify the installation, open command Prompt and run the below commands: java –version java –version To verify the Java compiler, run the below command: Javac -version Javac -version Setting up Environment Variables for Java in Linux If you are Linux user then find the complete solution to setting up environment variables for Java on Linux operating system. Step 1: Downlaod and Install JAVA JDK After installing the JDK in Linux, We need to configure the system so that it can recognize Java. Step 2: Open Linux Terminal Now we need to set JAVA_HOME. To do this, Open the terminal and run the below command: export JAVA_HOME=/path/to/your/jdk Step 3: Update Path Update the PATH Variable on Linux Add the JDK directory to the , and run the below command in the terminal: export PATH=$PATH:$JAVA_HOME/bin Step 4: Change Environment Variable Permanent The above changes are temporary. To make the environment variable changes permanent, you need to add the commands to your shell’s configuration file. Depending on the shell you are using. For bash use the command nano ~/.bashrc For zsh use the command nano ~/.zshrc For fish use the command nano ~/.config/fish/config.fish Add the following commands at the end of the file. export JAVA_HOME=/path/to/your/jdk export PATH=$PATH:$JAVA_HOME/bin After saving the file, run the following command to apply the changes: source ~/.bashrc This will set your and variables on Linux permanently. Step 5: Verify the Installation To confirm the path, run the below command: echo $JAVA_HOME It should output the path of JDK Installer. If the output is empty that means the JAVA_HOME environment variable is not set properly. Step 6: Check Updated Path To confirm the updated the below command: echo $PATH It should output the path of the bin directory to your JDK. If the output is empty that means the PATH environment variable is not set properly. Then write and to verify the installation. Setting up Environment Variables for Java in macOS If you are Mac user then find the complete solution to setting up environment variables for Java on macOS operating system. Step 1: Configure the System After installing the JDK in macOS, we need to configure the system so that it can recognize Java. Step 2: Set up the Java Home Now to set the and environment variables permanently, we need to add them to our shell’s configuration file depending on the shell we are using. For bash (if you have older version of macOS) run the command nano ~/.bash_profile For zsh(default shell for macOS 10.15 Catalina and later) run the command nano ~/.zshrc Add the following commands at the end of the file: export JAVA_HOME=$(/usr/libexec/java_home) export PATH=$JAVA_HOME/bin:$PATH Step 3: Change the Base Now, we need to apply the changes. For bash apply the changes by running the below command: source ~/.bash_profile For zsh apply the changes by running the below command: source ~/.zshrc Step 4: Varify an Installation Verify the Installation Check JAVA_HOME environment variable by running the below command: echo $JAVA_HOME It should output the path of JDK Installer. If the output is empty that means the JAVA_HOME environment variable is not set properly. Check PATH environment variable by running the below command: echo $PATH It should output the path of the bin directory to your JDK. If the output is empty that means the PATH environment variable is not set properly. Then write and command to verify the installation on macOS. Step 5: Run the Compiled Java Program After compiling the Java program, we can run it using the following command: java HelloWorld Why Don’t We Include .class in the Command? When running a Java program, the java command expects a class name. It doesn’t matter what the file name is, as long as the class with the main() method is specified. For example: The correct command is java HelloWorld. This will correctly run the program. The command java HelloWorld.class is an incorrect command, this will cause an error because the JVM is looking for a class named HelloWorld.class, not HelloWorld. After following these steps, your environment variable for Java will be set correctly, and you can easily run Java programs from the terminal without any issues. Conclusion Creating a smooth and efficient development workflow requires setting up environment variables for Java. By helping your system locate essential tools like the Java compiler and runtime, these variables simplify many tasks, such as compiling and executing Java programs. A properly configured variable like JAVA_HOME also ensures seamless integration of Java with other frameworks and development tools. Whether you use Windows, macOS, or Linux, you can customize your Java environment to meet your specific needs by following the steps outlined in this guide Java Syntax kartik Improve Java School Programming TechTips java-basics Java\n\nJava Syntax Last Updated : 06 May, 2025 Comments Improve Suggest changes 975 Likes Like Report Java is an object-oriented programming language that is known for its simplicity, portability, and robustness. The syntax of Java programming language is very closely aligned with C and C++, which makes it easier to understand. Java Syntax refers to a set of rules that define how Java programs are written and interpreted by the compiler. These rules ensure that your code is readable, logically correct, and error-free. Now, let’s understand the syntax and structure of Java programs with a basic “Hello World” program. Structure of a Java ProgramA basic Java program consists of several components that create a functional application. We can learn about basic Java syntax using the following program: Java 1312345678910111213OutputExplanation: The above program shows the basic Java program that contains class declaration, main method, statements, etc. Let’s try to understand them one by one. Note: In the above code, although we did not explicitly import any package, the java.lang package is automatically imported by default in every Java program. This package contains essential classes like System, Math, and String, which is why we can use System.out.println(“Hello World”); without any additional imports. Terminologies of a Basic Java Program 1. Class Declaration: Every Java program starts with a class declaration using the class keyword. “A class is a blueprint of an object” and we can also define class as a logical template that shares common properties and methods. 2. Object: The object is an instance of a class. It is an entity that has behavior and state. Example: Dog, Cat, Monkey etc. are the object of the “Animal” class.Behaviour: Running on the road.3. Main Method: The public static void main(String args[]) method is the entry point where the program starts execution. 4. Statements: Each line of code inside the method must end with a semicolon(;) Steps to Compile and Run a Java Program in a Console 1. Run the javac command to compile the Java Program javac Geeks.java The Java compiler(javac) reads the source code(Geeks.java) and generates a bytecode file(Geeks.class) in the same directory 2. Use the java command to execute the compiled bytecode java Geeks Note: Do include the .class extension in the command.Make sure the Geeks.class file is in the current directory.Java Syntax Key ElementsThere are three types of comments in Java. Single line Comment// This is a single-line comment Multi-line Comment/* This is a multi-line comment */ Documentation Comment It is also known as a doc comment /** This is a doc comment */ 2. Source File NameSource File Name Rule in Java. 1. When there is a public class in the file The name of a source file must exactly match the name of the public class name with the extension. java Example: Assume you have a public class named Geeks. Java Note: Geeks. java is a valid syntax.geeks.java is a invalid syntax.2. When there is no public class in the file The source file name can be anything, but it must have the .java extension. Java Here, the class is not declared as public so you can make the file name anything like Example.java, Program.java etc 3. Case Sensitivity Java is a case-sensitive language, which means that the identifiers AB, Ab, aB, and ab are different in Java. System.out.println(“Hello World”); // valid syntax system.out.println(“Hello World”); // invalid syntax because of the first letter of System keyword is always uppercase. 4. Class NamesThe first letter of the class should be in Uppercase (lowercase is allowed but discouraged). If several words are used to form the name of the class, each inner word’s first letter should be in uppercase. Underscores are allowed, but not recommended. Also allowed are numbers and currency symbols, although the latter are also discouraged because they are used for a special purpose (for inner and anonymous classes). class MyJavaProgram // valid syntax class 1Program // invalid syntax class My1Program // valid syntax class $Program // valid syntax, but discouraged class My$Program // valid syntax, but discouraged (inner class Program inside the class My) class myJavaProgram // valid syntax, but discouraged 6. Method NamesAll the method names should start with a lowercase letter (uppercase is also allowed but lowercase is recommended). If several words are used to form the name of the method, then each first letter of the inner word should be in Uppercase. Underscores are allowed, but not recommended. Also allowed are digits and currency symbols. public void employeeRecords() // valid syntax public void EmployeeRecords() // valid syntax, but discouraged 7. Identifiers in JavaIdentifiers are the names of local variables, instance and class variables, and labels, but also the names for classes, packages, modules and methods. All Unicode characters are valid, not just the ASCII subset. All identifiers can begin with a letter, a currency symbol or an underscore ( _ ). According to the convention, a letter should be lowercase for variables. The first character of identifiers can be followed by any combination of letters, digits, currency symbols and the underscore. The underscore is not recommended for the names of variables. Constants (static final attributes and enums) should be in all Uppercase letters. Most importantly identifiers are case-sensitive. A keyword cannot be used as an identifier since it is a reserved word and has some special meaning. Legal identifiers: MinNumber, total, ak74, hello_world, $amount, _under_value Illegal identifiers: 74ak, -amount 8. White spaces in JavaA line containing only white spaces, possibly with the comment, is known as a blank line, and the Java compiler ignores it. 9. Access ModifiersThese modifiers control the scope of class and methods. Access Modifiers: default, public, protected, private. Non-access Modifiers: final, abstract, static, transient, synchronized, volatile, native. Access Modifier Within Class Within Package Outside Package by subclass only Outside Package Private Yes No No No Default Yes Yes No No Protected Yes Yes Yes No Public Yes Yes Yes Yes 10. Java KeywordsKeywords or Reserved words are the words in a language that are used for some internal process or represent some predefined actions. These words are therefore not allowed to be used as variable names or objects. Note: goto and const are reserved keywords in Java. It means we cannot use them as identifiers. They are not implemented ad have no functionality in the language. abstract assert boolean break byte case catch char class *const continue default do double else enum extends final finally float for *goto if implements import instanceof int interface long native new package private protected public return short static strictfp super switch synchronized this throw throws transient try void volatile while Java Hello World Program mayur_patil Improve Java java-basics Java",
        "code_examples": [
            "// A Java program to print \"Hello World\"\npublic class Geeks {\n    public static void main(String args[])\n    {\n        System.out.println(\"Hello World\");\n    }\n}\n// Output:\"Hello World\"",
            "// A Java program to print \"Hello World\"",
            "public class Geeks {",
            "public static void main(String args[])",
            "System.out.println(\"Hello World\");",
            "// Output:\"Hello World\"",
            "// A Java program to print \"Hello World\"\npublic class Geeks {\n    public static void main(String args[])\n    {\n        System.out.println(\"Hello World\");\n    }\n}\n// Output:\"Hello World\"",
            "java.util.regex",
            "BufferedReader",
            "ExecutorService",
            "// A Java program to print \"Hello World\"\npublic class Geeks {\n    public static void main(String args[])\n    {\n        System.out.println(\"Hello World\");\n    }\n}\n// Output:\"Hello World\"",
            "1// A Java program to print \"Hello World\" 2public class Geeks { 3    public static void main(String args[]) 4    { 5        System.out.println(\"Hello World\"); 6    } 7}8​9// Output:\"Hello World\"",
            "// A Java program to print \"Hello World\"\npublic class Geeks {\n    public static void main(String args[])\n    {\n        System.out.println(\"Hello World\");\n    }\n}\n// Output:\"Hello World\"",
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "public class HelloWorld {",
            "public static void main(String[] args)",
            "System.out.println(\"Hello, World!\");",
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "1public class HelloWorld {2    public static void main(String[] args)3    {4        System.out.println(\"Hello, World!\");5    }6}",
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "#include <iostream>",
            "/*package whatever //do not write package name here */",
            "main (String[] args) {",
            "System.out.println(",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "C:\\Program Files\\Java\\jdk-23\\bin",
            "java --version",
            "javac -version",
            "java --version",
            "javac -version",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "// FileName : \"Geeks.java\".",
            "public class Geeks {",
            "// Program begins with a call to main() method",
            "// main method is the entry point of a Java Program",
            "public static void main(String args[])",
            "// Prints \"Hello World\" to the console",
            "System.out.println(\"Hello World\");",
            "Hello World",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "1// FileName : \"Geeks.java\".2​3public class Geeks {4​5    // Program begins with a call to main() method6    // main method is the entry point of a Java Program7    public static void main(String args[])8    {9​10        // Prints \"Hello World\" to the console11        System.out.println(\"Hello World\");12    }13}",
            "OutputHello World",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
        ],
        "source": "web_search",
        "url": "https://www.geeksforgeeks.org/java/",
        "level": "intermediate"
    },
    {
        "topic": "java",
        "title": "Introduction to Java | GeeksforGeeks",
        "content": "Introduction to Java Last Updated : 07 Mar, 2025 Comments Improve Suggest changes 1.05k Likes Like Report Java is a class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is intended to let application developers Write Once and Run Anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java was developed by James Gosling at Sun Microsystems Inc. in May 1995 and later acquired by Oracle Corporation and is widely used for developing applications for desktop, web, and mobile devices. Java is known for its simplicity, robustness, and security features, making it a popular choice for enterprise-level applications. Java applications are compiled to byte code that can run on any Java Virtual Machine. The syntax of Java is similar to C/C++. Java makes writing, compiling, and debugging programming easy. It helps to create reusable code and modular programs. Table of Content History of JavaKey Features of JavaPlatform IndependentObject-Oriented Programming SimplicityRobustnessSecurityDistributedMultithreading Portability High Performance How Java Code Executes?Creating the ProgramCompiling the ProgramRunning the ProgramHistory of JavaJava’s history is as interesting as it is impactful. The journey of this powerful programming language began in 1991 when James Gosling, Mike Sheridan, and Patrick Naughton, a team of engineers at Sun Microsystems known as the “Green Team,” set out to create a new language initially called “Oak.” Oak was later renamed Java, inspired by Java coffee, and was first publicly released in 1996 as Java 1.0. This initial version provided a no-cost runtime environment across popular platforms, making it accessible to a broad audience. Arthur Van Hoff rewrote the Java 1.0 compiler to strictly comply with its specifications, ensuring its reliability and cross-platform capabilities. Java evolved over time, with Java 2 introducing multiple configurations tailored for different platforms, showcasing its versatility.In 1997, Sun Microsystems aimed to formalize Java through the ISO standards body but eventually withdrew from the process.Despite not formalizing through ISO, Sun Microsystems offered most Java implementations at no cost, earning revenue by licensing specialized products such as the Java Enterprise System.A significant milestone in Java’s history occurred on November 13, 2006, when Sun Microsystems released a large portion of the Java Virtual Machine (JVM) as free, open-source software.By May 8, 2007, the core JVM code was fully available under open-source distribution terms.Java was designed with core principles: simplicity, robustness, security, high performance, portability, multi-threading, and dynamic interpretation. These principles have made Java a preferred language for various applications, including mobile devices, internet programming, gaming, and e-business.Today, Java continues to be a cornerstone of modern software development, widely used across industries and platforms.If you want to know more, must read – The Complete History of Java Programming Language Key Features of Java1. Platform IndependentCompiler converts source code to byte code and then the JVM executes the bytecode generated by the compiler. This byte code can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of the byte code. That is why we call java a platform-independent language. 2. Object-Oriented Programming Java is an object-oriented language, promoting the use of objects and classes. Organizing the program in the terms of a collection of objects is a way of object-oriented programming, each of which represents an instance of the class. The four main concepts of Object-Oriented programming are: AbstractionEncapsulationInheritancePolymorphism3. SimplicityJava’s syntax is simple and easy to learn, especially for those familiar with C or C++. It eliminates complex features like pointers and multiple inheritances, making it easier to write, debug, and maintain code. 4. RobustnessJava language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, exception handling, and memory allocation. 5. SecurityIn java, we don’t have pointers, so we cannot access out-of-bound arraysi.e it shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. Also, java programs run in an environment that is independent of the os(operating system) environment which makes java programs more secure. 6.DistributedWe can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection. Java supports multithreading, enabling the concurrent execution of multiple parts of a program. This feature is particularly useful for applications that require high performance, such as games and real-time simulations. 8. PortabilityAs we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable. WORA(Write Once Run Anywhere) makes java application to generates a ‘.class’ file that corresponds to our applications(program) but contains code in binary format. It provides architecture-neutral ease, as bytecode is independent of any machine architecture. It is the primary reason java is used in the enterprising IT industry globally worldwide. 9. High PerformanceJava architecture is defined in such a way that it reduces overhead during the runtime and at some times java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basis where it only compiles those methods that are called making applications to execute faster. How Java Code Executes?The execution of a Java application code involves three main steps: How Java Code Executes1. Creating the ProgramJava programs are written using a text editor or an Integrated Development Environment (IDE) like IntelliJ IDEA, Eclipse, or NetBeans. The source code is saved with a extension. 2. Compiling the ProgramThe Java compiler () converts the source code into bytecode, which is stored in a file. This bytecode is platform-independent and can be executed on any machine with a JVM. 3. Running the ProgramThe JVM executes the compiled bytecode, translating it into machine code specific to the operating system and hardware. Example Program: Java 6123456Write your first Java program with ‘First Java Program: Hello World‘. Essential Java Terminologies You Need to KnowBefore learning Java, one must be familiar with these common terms of Java. 1. Java Virtual Machine(JVM)The JVM is an integral part of the Java platform, responsible for executing Java bytecode. It ensures that the output of Java programs is consistent across different platforms. Writing a program is done by a java programmer like you and me.The compilation is done by the JAVAC compiler which is a primary Java compiler included in the Java development kit (JDK). It takes the Java program as input and generates bytecode as output.In the Runningphase of a program, JVM executes the bytecode generated by the compiler.The Java Virtual Machine (JVM) is designed to run the bytecode generated by the Java compiler.Each operating system has its own version of the JVM, but all JVMs follow the same rules and standards. This means Java programs can run the same way on any device with a JVM, regardless of the operating system. This is why Java is called a platform-independent language. 2. BytecodeBytecode is the intermediate representation of Java code, generated by the Java compiler. It is platform-independent and can be executed by the JVM. 3. Java Development Kit(JDK)While we were using the term JDK when we learn about bytecode and JVM. So, as the name suggests, it is a complete Java development kit that includes everything including compiler,Java Runtime Environment (JRE), Java Debuggers, Java Docs, etc. For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program. 4. Java Runtime Environment (JRE)JDK includes JRE. JRE installation on our computers allows the java program to run, however, we cannot compile it. JRE includes a browser, JVM, applet support, and plugins. For running the java program, a computer needs JRE. 5. Garbage CollectorIn Java, programmers can’t delete the objects. To delete or recollect that memory JVM has a program called Garbage Collector. Garbage Collectors can recollect the objects that are not referenced. So Java makes the life of a programmer easy by handling memory management. However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage cannot recover the memory of objects being referenced. 6. ClassPathThe Classpathis the file path where the java runtime and Java compiler look for .class files to load. By default, JDK provides many libraries. If you want to include external libraries they should be added to the classpath. Basically everything in java is represented in Class as an object including the main function. Platform independent: Java code can run on any platform that has a Java Virtual Machine (JVM) installed, which means that applications can be written once and run on any device.Object-Oriented: Java is an object-oriented programming language, which means that it follows the principles of encapsulation, inheritance, and polymorphism.Security: Java has built-in security features that make it a secure platform for developing applications, such as automatic memory management and type checking.Large community: Java has a large and active community of developers, which means that there is a lot of support available for learning and using the language.Enterprise-level applications: Java is widely used for developing enterprise-level applications, such as web applications, e-commerce systems, and database systems.Performance: Java can be slower compared to other programming languages, such as C++, due to its use of a virtual machine and automatic memory management.Memory management: Java’s automatic memory management can lead to slower performance and increased memory usage, which can be a drawback for some applications.Useful Resources:100 Days Of Java: A Complete Guide For Beginners7 Tips to Help You Stand Out as a Java Developer ConclusionJava is a powerful and versatile programming language that’s great for beginners and experienced developers alike. By learning the basics, like what classes, objects, and methods are, you can start creating your own programs and see how Java can be used in real-world applications. Whether you’re interested in building games, mobile apps, or websites, Java provides a solid foundation to bring your ideas to life. Remember, the more you practice, the better you’ll get. Keep exploring, and soon you’ll be writing your own Java programs with confidence! Similarities and Difference between Java and C++ G goelshubhangi3118 Improve Java java-basics Java\n\nSimilarities and Difference between Java and C++ Last Updated : 21 Apr, 2023 Comments Improve Suggest changes 288 Likes Like Report Nowadays Java and C++ programming languages are vastly used in competitive coding. Due to some awesome features, these two programming languages are widely used in industries as well as comepetitive programming . C++ is a widely popular language among coders for its efficiency, high speed, and dynamic memory utilization. Java is widely used in the IT industry’s , It is incomparable to any other programming language in terms of software development. Let us go through the various points to compare these popular coding languages: Similarities between Java and C++ 1. Execution: At compile-time, Java source code or .java file is converted into bytecode or .class file. At runtime, JVM (Java Virtual Machine) will load the .class file and will convert it to machine code with the help of an interpreter. After compilation of method calls (using the Just-In-Time (JIT) compiler), JVM will execute the optimized code. So Java is both compiled as well as an interpreted language. On the other hand, C++ executes the code by using only a compiler. The C++ compiler compiles and converts the source code into the machine code. That’s why C++ is faster than Java but not platform-independent. Below is the illustration of how Java and C++ codes are executed: The execution of a Java code is as follows: Execution of a C++ Code 2. Features: C++ and Java both have several Object Oriented programming features which provide many useful programming functionalities. Some features are supported by one and some by the other. Even though both languages use the concept of OOPs, neither can be termed 100% object-oriented languages. Java uses primitive data types and thus cannot be termed as 100% Object-Oriented Language. C++ uses some data types similar to primitive ones and can implement methods without using any data type. And thus, it is also deprived of the 100% Object-Oriented title. Below is the table which shows the features supported and not supported by both the programming languages: Syntax Difference: Syntax of c++: C++ syntax of java Java Applications: Both C++ and Java have vast areas of application. Below are the applications of both languages: Applications of C++ Programming language: Suitable for Developing large software (like passenger reservation systems). MySQL is written in C++. For fast execution, C++ is majorly used in Game Development. Google Chromium browser, file system, and cluster data processing are all written in C++. Adobe Premiere, Photoshop, and Illustrator; these popular applications are scripted in C++. Advanced Computations and Graphics- real-time physical simulations, high-performance image processing. C++ is also used in many advanced types of medical equipment like MRI machines, etc. Applications of Java Programming language: Desktop GUI Applications development. Android and Mobile application development. Applications of Java are in embedded technologies like SIM cards, disk players, TV, etc. Java EE (Enterprise Edition) provides an API and runtime environment for running large enterprise software. Network Applications and Web services like Internet connection, Web App Development. Environment: C++ is a Platform dependent while Java is a platform-independent programming language. We have to write and run C++ code on the same platform. Java has the WORA (Write Once and Run Everywhere) feature by which we can write our code in one platform once and we can run the code anywhere. Differences between Java and C++ are as follows: Setting up Environment Variables For Java - Complete Guide to Set JAVA_HOME P PinakiBanerjee0 Improve C++ Difference Between Java Write From Home CPPJava\n\nSetting up Environment Variables For Java – Complete Guide to Set JAVA_HOME Last Updated : 09 May, 2025 Comments Improve Suggest changes 333 Likes Like Report In the journey to learning the Java programming language, setting up environment variables for Java is essential because it helps the system locate the Java tools needed to run the Java programs. Now, this guide on how to setting up environment variables for Java is a one-place solution for Mac, Windows, and Linux users. Here we have discussed the step-by-step process to set the Environment variable in all three major OS. Before setting up the environment variables, the Java Development Kit (JDK) needs to be installed on your system and you must know the JDK installation directory on your system. To set Java Environment Variables, you need to set, JAVA_HOME: It points to the directory where the JDK is installed on the system. PATH: It specifies where the operating system should look for executable files. Setting the Environment Variables in Windows Download and install the latest JDK from the official Oracle website. To know how to download JDK on Windows OS, refer to this article: How to Install Java on Windows, Linux, and macOS? Step 2: Set JAVA_HOME Click Windows + S, search for “Environment Variables,” and click Edit the system environment variables. In the System Properties window, click Environment Variables. Now, go to Environment Variable > System Variable section > click New. Set JAVA_HOME In the Variable name field, enter and in the Variable value field enter the path where the JDK is installed. Click OK to save the changes. Variable name Step 3: Update the Path Variable Now we need to update the PATH variable. For this, open the C: drive, go to Program Files > Java > jdk-23 > bin folder, then copy the path. Update the Path Variable Go inside System Variables section, select the path variable. Right-click on it and choose the option Edit. In the Edit environment window, click New. System Variables Then add the path to the JDK’s bin folder (e.g., ). JDK’s Click OK to save the changes. Step 4: Check the Java Version Now to verify the installation, open command Prompt and run the below commands: java –version java –version To verify the Java compiler, run the below command: Javac -version Javac -version Setting up Environment Variables for Java in Linux If you are Linux user then find the complete solution to setting up environment variables for Java on Linux operating system. Step 1: Downlaod and Install JAVA JDK After installing the JDK in Linux, We need to configure the system so that it can recognize Java. Step 2: Open Linux Terminal Now we need to set JAVA_HOME. To do this, Open the terminal and run the below command: export JAVA_HOME=/path/to/your/jdk Step 3: Update Path Update the PATH Variable on Linux Add the JDK directory to the , and run the below command in the terminal: export PATH=$PATH:$JAVA_HOME/bin Step 4: Change Environment Variable Permanent The above changes are temporary. To make the environment variable changes permanent, you need to add the commands to your shell’s configuration file. Depending on the shell you are using. For bash use the command nano ~/.bashrc For zsh use the command nano ~/.zshrc For fish use the command nano ~/.config/fish/config.fish Add the following commands at the end of the file. export JAVA_HOME=/path/to/your/jdk export PATH=$PATH:$JAVA_HOME/bin After saving the file, run the following command to apply the changes: source ~/.bashrc This will set your and variables on Linux permanently. Step 5: Verify the Installation To confirm the path, run the below command: echo $JAVA_HOME It should output the path of JDK Installer. If the output is empty that means the JAVA_HOME environment variable is not set properly. Step 6: Check Updated Path To confirm the updated the below command: echo $PATH It should output the path of the bin directory to your JDK. If the output is empty that means the PATH environment variable is not set properly. Then write and to verify the installation. Setting up Environment Variables for Java in macOS If you are Mac user then find the complete solution to setting up environment variables for Java on macOS operating system. Step 1: Configure the System After installing the JDK in macOS, we need to configure the system so that it can recognize Java. Step 2: Set up the Java Home Now to set the and environment variables permanently, we need to add them to our shell’s configuration file depending on the shell we are using. For bash (if you have older version of macOS) run the command nano ~/.bash_profile For zsh(default shell for macOS 10.15 Catalina and later) run the command nano ~/.zshrc Add the following commands at the end of the file: export JAVA_HOME=$(/usr/libexec/java_home) export PATH=$JAVA_HOME/bin:$PATH Step 3: Change the Base Now, we need to apply the changes. For bash apply the changes by running the below command: source ~/.bash_profile For zsh apply the changes by running the below command: source ~/.zshrc Step 4: Varify an Installation Verify the Installation Check JAVA_HOME environment variable by running the below command: echo $JAVA_HOME It should output the path of JDK Installer. If the output is empty that means the JAVA_HOME environment variable is not set properly. Check PATH environment variable by running the below command: echo $PATH It should output the path of the bin directory to your JDK. If the output is empty that means the PATH environment variable is not set properly. Then write and command to verify the installation on macOS. Step 5: Run the Compiled Java Program After compiling the Java program, we can run it using the following command: java HelloWorld Why Don’t We Include .class in the Command? When running a Java program, the java command expects a class name. It doesn’t matter what the file name is, as long as the class with the main() method is specified. For example: The correct command is java HelloWorld. This will correctly run the program. The command java HelloWorld.class is an incorrect command, this will cause an error because the JVM is looking for a class named HelloWorld.class, not HelloWorld. After following these steps, your environment variable for Java will be set correctly, and you can easily run Java programs from the terminal without any issues. Conclusion Creating a smooth and efficient development workflow requires setting up environment variables for Java. By helping your system locate essential tools like the Java compiler and runtime, these variables simplify many tasks, such as compiling and executing Java programs. A properly configured variable like JAVA_HOME also ensures seamless integration of Java with other frameworks and development tools. Whether you use Windows, macOS, or Linux, you can customize your Java environment to meet your specific needs by following the steps outlined in this guide Java Syntax kartik Improve Java School Programming TechTips java-basics Java\n\nJava Syntax Last Updated : 06 May, 2025 Comments Improve Suggest changes 975 Likes Like Report Java is an object-oriented programming language that is known for its simplicity, portability, and robustness. The syntax of Java programming language is very closely aligned with C and C++, which makes it easier to understand. Java Syntax refers to a set of rules that define how Java programs are written and interpreted by the compiler. These rules ensure that your code is readable, logically correct, and error-free. Now, let’s understand the syntax and structure of Java programs with a basic “Hello World” program. Structure of a Java ProgramA basic Java program consists of several components that create a functional application. We can learn about basic Java syntax using the following program: Java 1312345678910111213OutputExplanation: The above program shows the basic Java program that contains class declaration, main method, statements, etc. Let’s try to understand them one by one. Note: In the above code, although we did not explicitly import any package, the java.lang package is automatically imported by default in every Java program. This package contains essential classes like System, Math, and String, which is why we can use System.out.println(“Hello World”); without any additional imports. Terminologies of a Basic Java Program 1. Class Declaration: Every Java program starts with a class declaration using the class keyword. “A class is a blueprint of an object” and we can also define class as a logical template that shares common properties and methods. 2. Object: The object is an instance of a class. It is an entity that has behavior and state. Example: Dog, Cat, Monkey etc. are the object of the “Animal” class.Behaviour: Running on the road.3. Main Method: The public static void main(String args[]) method is the entry point where the program starts execution. 4. Statements: Each line of code inside the method must end with a semicolon(;) Steps to Compile and Run a Java Program in a Console 1. Run the javac command to compile the Java Program javac Geeks.java The Java compiler(javac) reads the source code(Geeks.java) and generates a bytecode file(Geeks.class) in the same directory 2. Use the java command to execute the compiled bytecode java Geeks Note: Do include the .class extension in the command.Make sure the Geeks.class file is in the current directory.Java Syntax Key ElementsThere are three types of comments in Java. Single line Comment// This is a single-line comment Multi-line Comment/* This is a multi-line comment */ Documentation Comment It is also known as a doc comment /** This is a doc comment */ 2. Source File NameSource File Name Rule in Java. 1. When there is a public class in the file The name of a source file must exactly match the name of the public class name with the extension. java Example: Assume you have a public class named Geeks. Java Note: Geeks. java is a valid syntax.geeks.java is a invalid syntax.2. When there is no public class in the file The source file name can be anything, but it must have the .java extension. Java Here, the class is not declared as public so you can make the file name anything like Example.java, Program.java etc 3. Case Sensitivity Java is a case-sensitive language, which means that the identifiers AB, Ab, aB, and ab are different in Java. System.out.println(“Hello World”); // valid syntax system.out.println(“Hello World”); // invalid syntax because of the first letter of System keyword is always uppercase. 4. Class NamesThe first letter of the class should be in Uppercase (lowercase is allowed but discouraged). If several words are used to form the name of the class, each inner word’s first letter should be in uppercase. Underscores are allowed, but not recommended. Also allowed are numbers and currency symbols, although the latter are also discouraged because they are used for a special purpose (for inner and anonymous classes). class MyJavaProgram // valid syntax class 1Program // invalid syntax class My1Program // valid syntax class $Program // valid syntax, but discouraged class My$Program // valid syntax, but discouraged (inner class Program inside the class My) class myJavaProgram // valid syntax, but discouraged 6. Method NamesAll the method names should start with a lowercase letter (uppercase is also allowed but lowercase is recommended). If several words are used to form the name of the method, then each first letter of the inner word should be in Uppercase. Underscores are allowed, but not recommended. Also allowed are digits and currency symbols. public void employeeRecords() // valid syntax public void EmployeeRecords() // valid syntax, but discouraged 7. Identifiers in JavaIdentifiers are the names of local variables, instance and class variables, and labels, but also the names for classes, packages, modules and methods. All Unicode characters are valid, not just the ASCII subset. All identifiers can begin with a letter, a currency symbol or an underscore ( _ ). According to the convention, a letter should be lowercase for variables. The first character of identifiers can be followed by any combination of letters, digits, currency symbols and the underscore. The underscore is not recommended for the names of variables. Constants (static final attributes and enums) should be in all Uppercase letters. Most importantly identifiers are case-sensitive. A keyword cannot be used as an identifier since it is a reserved word and has some special meaning. Legal identifiers: MinNumber, total, ak74, hello_world, $amount, _under_value Illegal identifiers: 74ak, -amount 8. White spaces in JavaA line containing only white spaces, possibly with the comment, is known as a blank line, and the Java compiler ignores it. 9. Access ModifiersThese modifiers control the scope of class and methods. Access Modifiers: default, public, protected, private. Non-access Modifiers: final, abstract, static, transient, synchronized, volatile, native. Access Modifier Within Class Within Package Outside Package by subclass only Outside Package Private Yes No No No Default Yes Yes No No Protected Yes Yes Yes No Public Yes Yes Yes Yes 10. Java KeywordsKeywords or Reserved words are the words in a language that are used for some internal process or represent some predefined actions. These words are therefore not allowed to be used as variable names or objects. Note: goto and const are reserved keywords in Java. It means we cannot use them as identifiers. They are not implemented ad have no functionality in the language. abstract assert boolean break byte case catch char class *const continue default do double else enum extends final finally float for *goto if implements import instanceof int interface long native new package private protected public return short static strictfp super switch synchronized this throw throws transient try void volatile while Java Hello World Program mayur_patil Improve Java java-basics Java\n\nJava Hello World Program Last Updated : 15 Apr, 2025 Comments Improve Suggest changes 779 Likes Like Report Java is one of the most popular and widely used programming languages and platforms. In this article, we will learn how to write a simple Java Program. This article will guide you on how to write, compile, and run your first Java program. With the help of Java, we can develop web and mobile applications. In this article, we will learn: How to create your first Java programHow to compile and run Java codeUnderstanding the Hello World program structureSteps to Implement a Java Program The implementation of a Java program involves the following steps. They include: Creating the program Compiling the program Running the program 1. Create a Java ProgramJava programs can be written in a text editor (Notepad, VS Code) or an IDE (IntelliJ, Eclipse, NetBeans). // Simple Java Hello World Programpublic class HelloWorld{ public static void main(String[] args) { System.out.println(“Hello, World”); }} Note: Save the file as HelloWorld.java 2. Compile the Java Program To compile the program, we must run the Java compiler (javac), with the name of the source file on the “command prompt” (Windows) or “Terminal” (Mac/Linux) as follows: javac HelloWorld.java Note: Before running the command, make sure you navigate to the correct directory where your HelloWorld.java file is saved.If everything is OK, the compiler creates a file called HelloWorld.class which contains the byte code of the program. 3. Run the Java Program We need to use the Java Interpreter to run a program. Execute and compile Java program with below command: java HelloWorld Output: Note: Java syntax is similar to C/C++, which makes it easier for programmers who are already familiar with those languages. Java syntax is simple and easy to understand. Implementation of Java Hello WorldThe below-given program is the most simple program of Java printing “Hello World” to the screen. Let us try to understand every bit of code step by step. Java 111234567891011OutputUnderstanding the Java Hello World Code1. Class Definition Every Java program must have at least one class. This line uses the keyword class to declare that a new class is being defined. class HelloWorld { // //Statements} Note: If the class is public, the filename must match the class name HelloWorld.java 2. HelloWorld It is an identifier that is the name of the class. The entire class definition, including all of its members, will be between the opening curly brace ” { ” and the closing curly brace ” } “. 3. main Method In the Java programming language, every application must contain a main method. The main function(method) is the entry point of your Java application, and it’s mandatory in a Java program. Signature of main() Methodpublic static void main(String[] args) Explanation of the above syntax: public: So that JVM can execute the method from anywhere. If we declare something as public it simply means it is accessible from anywhere.static: The main method is to be called without creating an object. The modifiers are public and static can be written in either order. void: The main method doesn’t return any value. main(): Name configured in the JVM. The main method must be inside the class definition. The compiler executes the codes starting always from the main function. String[]: The main method accepts a single argument, i.e., an array of elements of type String. Like in C/C++, the main method is the entry point for your application and will subsequently invoke all the other methods required by your program. The next line of code is shown here. Notice that it occurs inside the main() method. System.out.println(“Hello, World”); Explanation of the above syntax: This line is used to print the Hello, World on the console Here is the brief description of the above code: System: It is the predefined class which is present in the java.lang package which provides the system resources for input and output.out: It is a static field of type PrintStream in the System class used to represent the standard output stream on the console.. (dot): It is the member access operator also known as link operator used to access the members of class or objects i.e fields and methods.println(): It is the method of PrintStream class which is used to print the message on the new line written inside as string”” (enclosed with double quotes).Comments They can either be multiline or single-line comments. // Simple Java program // FileName: “HelloWorld.java” This is a single-line comment. This type of comment must begin with // as in C/C++. For multiline comments, they must begin from /* and end with */. /* This is a multi-line comment */ Important Points: The name of the class is HelloWorld, which is same as the name of the file “HelloWorld.java”. This is not a coincidence. In Java, all codes must present inside a class, and there is at most one public class which contains the main() method. By convention, the name of the main class(a class that contains the main method) should match the name of the file that holds the program. Every Java program must have a class definition that matches the filename (class name and file name should be same). Compiling the Program After successfully setting up the environment, we can open a terminal in both Windows/Unix and go to the directory where the file – HelloWorld.java is present. Now, to compile the HelloWorld program, execute the compiler – javac, to specify the name of the source file on the command line, as shown: javac HelloWorld.java The compiler creates a HelloWorld.class (in the current working directory) that contains the bytecode version of the program. Now, to execute our program, JVM (Java Virtual Machine) needs to be called using Java, specifying the name of the class file on the command line, as shown: java HelloWorld This will print “Hello World” to the console or terminal screen. Note: If you get ClassNotFoundException, ensure the .class file is in the correct directory or check your CLASSPATH. Output: 1. In Windows, 2. In Linux, Java Identifiers G Improve Java School Programming java-basics Java",
        "code_examples": [
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "public class HelloWorld {",
            "public static void main(String[] args)",
            "System.out.println(\"Hello, World!\");",
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "1public class HelloWorld {2    public static void main(String[] args)3    {4        System.out.println(\"Hello, World!\");5    }6}",
            "public class HelloWorld {\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "#include <iostream>",
            "/*package whatever //do not write package name here */",
            "main (String[] args) {",
            "System.out.println(",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"GFG!\";\n    return 0;\n}",
            "/*package whatever //do not write package name here */\nimport java.io.*;\nclass GFG {\n    public static void main (String[] args) {\n        System.out.println(\"GFG!\");\n    }\n}",
            "C:\\Program Files\\Java\\jdk-23\\bin",
            "java --version",
            "javac -version",
            "java --version",
            "javac -version",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "// FileName : \"Geeks.java\".",
            "public class Geeks {",
            "// Program begins with a call to main() method",
            "// main method is the entry point of a Java Program",
            "public static void main(String args[])",
            "// Prints \"Hello World\" to the console",
            "System.out.println(\"Hello World\");",
            "Hello World",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "1// FileName : \"Geeks.java\".2​3public class Geeks {4​5    // Program begins with a call to main() method6    // main method is the entry point of a Java Program7    public static void main(String args[])8    {9​10        // Prints \"Hello World\" to the console11        System.out.println(\"Hello World\");12    }13}",
            "OutputHello World",
            "// FileName : \"Geeks.java\".\npublic class Geeks {\n    // Program begins with a call to main() method\n    // main method is the entry point of a Java Program\n    public static void main(String args[])\n    {\n        // Prints \"Hello World\" to the console\n        System.out.println(\"Hello World\");\n    }\n}",
            "import java.io.*;\npublic class Geeks {\n    public static void main (String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}",
            "class Program {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
            "Hello, World",
            "// Simple Java program\n// FileName: \"HelloWorld.java\"\npublic class HelloWorld {\n    // Your program begins with a call to main().\n    // Prints \"Hello, World\" to the terminal window.\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World\");\n    }\n}",
            "// Simple Java program",
            "// FileName: \"HelloWorld.java\"",
            "public class HelloWorld {",
            "// Your program begins with a call to main().",
            "// Prints \"Hello, World\" to the terminal window.",
            "public static void main(String[] args)",
            "System.out.println(\"Hello, World\");",
            "Hello, World",
            "// Simple Java program\n// FileName: \"HelloWorld.java\"\npublic class HelloWorld {\n    // Your program begins with a call to main().\n    // Prints \"Hello, World\" to the terminal window.\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World\");\n    }\n}",
            "// Simple Java program\n// FileName: \"HelloWorld.java\"\npublic class HelloWorld {\n    // Your program begins with a call to main().\n    // Prints \"Hello, World\" to the terminal window.\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World\");\n    }\n}",
            "1// Simple Java program2// FileName: \"HelloWorld.java\"3public class HelloWorld {4    5    // Your program begins with a call to main().6    // Prints \"Hello, World\" to the terminal window.7    public static void main(String[] args)8    {9        System.out.println(\"Hello, World\");10    }11}",
            "OutputHello, World",
            "// Simple Java program\n// FileName: \"HelloWorld.java\"\npublic class HelloWorld {\n    // Your program begins with a call to main().\n    // Prints \"Hello, World\" to the terminal window.\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello, World\");\n    }\n}"
        ],
        "source": "web_search",
        "url": "https://www.geeksforgeeks.org/introduction-to-java/",
        "level": "intermediate"
    },
    {
        "topic": "java",
        "title": "Java | Oracle",
        "content": "Java Oracle Java is the #1 programming language and development platform. It reduces costs, shortens development timeframes, drives innovation, and improves application services. Java continues to be the development platform of choice for enterprises and developers. Java to run desktop applications For End Users on a Desktop or Laptop computer Download Java for Desktops What is Java Help for end users Developers and Enterprise Administrators Free Java Development Kit (JDK) downloads and resources from Oracle, the stewards of Java Developer Downloads Developer Resources Enterprise Resources OpenJDK Early Access",
        "code_examples": [],
        "source": "web_search",
        "url": "https://www.java.com/",
        "level": "intermediate"
    },
    {
        "topic": "java",
        "title": "Download Java",
        "content": "Download Java Help Resources » Why is Java 8 recommended » What is Java » Remove older versions » Windows FAQ» Security» Support» Other help This download is for end users who need Java for running applications on desktops or laptops. Java 8 integrates with your operating system to run separately installed Java applications. If you were asked to install Java to run a desktop application, it's most likely you need this version.Developers are encouraged to download the latest Java Development Kit from OTN downloads.Enterprise users with access to My Oracle Support or Oracle Software Delivery Cloud should download through those services. Version 8 Update 451Release date: April 15, 2025filesize: 38.41 MB Download Java for Desktops By downloading Java you acknowledge that you have read and accepted the terms of the Oracle Technology Network License Agreement for Oracle Java SE. Important Oracle Java License Information. Important Oracle Java License Information The Oracle Java License changed for releases starting April 16, 2019. The Oracle Technology Network License Agreement for Oracle Java SE is substantially different from prior Oracle Java licenses. This license permits certain uses, such as personal use and development use, at no cost -- but other uses authorized under prior Oracle Java licenses may no longer be available. Please review the terms carefully before downloading and using this product. An FAQ is available here. Commercial license and support is available with a low cost Java SE Subscription. When your Java installation completes, if you are using webstart, you may need to restart your browser (close all browser windows and re-open). » FAQ about 64-bit Java for Windows » System Requirements Not the right operating system? See all Java 8 Downloads for Desktop users.",
        "code_examples": [],
        "source": "web_search",
        "url": "https://www.java.com/en/download/",
        "level": "intermediate"
    }
]