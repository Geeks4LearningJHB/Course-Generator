[
  {
    "topic": "python",
    "title": "Python Tutorial",
    "content": "Python Tutorial ❮ Home Next ❯ Learn Python Python is a popular programming language. Python can be used on a server to create web applications. Start learning Python now » Learning by Examples With our \"Try it Yourself\" editor, you can edit Python code and view the result. Example print(\"Hello, World!\") Try it Yourself » Click on the \"Try it Yourself\" button to see how it works. Python File Handling In our File Handling section you will learn how to open, read, write, and delete files. Python File Handling Python Database Handling In our database section you will learn how to access and work with MySQL and MongoDB databases: Python MySQL Tutorial Python MongoDB Tutorial Python Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Python Exercises Python Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Python Examples Python Quiz Test your Python skills with a quiz. Python Quiz Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Python Reference You will also find complete function and method references: Reference Overview Built-in Functions String Methods List/Array Methods Dictionary Methods Tuple Methods Set Methods File Methods Python Keywords Python Exceptions Python Glossary Random Module Requests Module Math Module CMath Module Download Python Download Python from the official Python web site: https://python.org Kickstart your career Get certified by completing the course Get certified w3schools CERTIFIED . 2025 ❮ Home Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [
      "print(\"Hello, World!\")"
    ],
    "source": "w3schools",
    "url": "https://www.w3schools.com/python/default.asp",
    "level": "beginner"
  },
  {
    "topic": "python",
    "title": "Sass String Functions",
    "content": "Sass String Functions ❮ Previous Next ❯ Sass String Functions The string functions are used to manipulate and get information about strings. Sass strings are 1-based. The first character in a string is at index 1, not 0. The following table lists all string functions in Sass: Function Description & Example quote(string) Adds quotes to string, and returns the result. Example:quote(Hello world!)Result: \"Hello world!\" str-index(string, substring) Returns the index of the first occurrence of the substring within string. Example:str-index(\"Hello world!\", \"H\")Result: 1 str-insert(string, insert, index) Returns string with insert inserted at the specified index position. Example:str-insert(\"Hello world!\", \" wonderful\", 6)Result: \"Hello wonderful world!\" str-length(string) Returns the length of string (in characters). Example:str-length(\"Hello world!\")Result: 12 str-slice(string, start, end) Extracts characters from string; start at start and end at end, and returns the slice. Example:str-slice(\"Hello world!\", 2, 5)Result: \"ello\" to-lower-case(string) Returns a copy of string converted to lower case. Example:to-lower-case(\"Hello World!\")Result: \"hello world!\" to-upper-case(string) Returns a copy of string converted to upper case. Example:to-upper-case(\"Hello World!\")Result: \"HELLO WORLD!\" unique-id() Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session). Example:unique-id()Result: tyghefnsv unquote(string) Removes quotes around string (if any), and returns the result. Example:unquote(\"Hello world!\")Result: Hello world! ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [],
    "source": "w3schools",
    "url": "https://www.w3schools.com/sass/sass_functions_string.php",
    "level": "beginner"
  },
  {
    "topic": "python",
    "title": "Python - Access Dictionary Items",
    "content": "Python - Access Dictionary Items ❮ Previous Next ❯ Accessing Items You can access the items of a dictionary by referring to its key name, inside square brackets: Example Get the value of the \"model\" key: thisdict = { \"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964 }x = thisdict[\"model\"] Try it Yourself » There is also a method called get() that will give you the same result: Example Get the value of the \"model\" key: x = thisdict.get(\"model\") Try it Yourself » Get Keys The keys() method will return a list of all the keys in the dictionary. Example Get a list of the keys: x = thisdict.keys() Try it Yourself » The list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list. Example Add a new item to the original dictionary, and see that the keys list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.keys()print(x) #before the changecar[\"color\"] = \"white\"print(x) #after the change Try it Yourself » Get Values The values() method will return a list of all the values in the dictionary. Example Get a list of the values: x = thisdict.values() Try it Yourself » The list of the values is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the values list. Example Make a change in the original dictionary, and see that the values list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.values()print(x) #before the changecar[\"year\"] = 2020print(x) #after the change Try it Yourself » Example Add a new item to the original dictionary, and see that the values list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.values()print(x) #before the changecar[\"color\"] = \"red\"print(x) #after the change Try it Yourself » Get Items The items() method will return each item in a dictionary, as tuples in a list. Example Get a list of the key:value pairs x = thisdict.items() Try it Yourself » The returned list is a view of the items of the dictionary, meaning that any changes done to the dictionary will be reflected in the items list. Example Make a change in the original dictionary, and see that the items list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.items()print(x) #before the changecar[\"year\"] = 2020print(x) #after the change Try it Yourself » Example Add a new item to the original dictionary, and see that the items list gets updated as well: car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964} x = car.items()print(x) #before the changecar[\"color\"] = \"red\"print(x) #after the change Try it Yourself » Check if Key Exists To determine if a specified key is present in a dictionary use the in keyword: Example Check if \"model\" is present in the dictionary: thisdict = { \"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964 } if \"model\" in thisdict: print(\"Yes, 'model' is one of the keys in the thisdict dictionary\") Try it Yourself » ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [
      "thisdict =\t{\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}x = thisdict[\"model\"]",
      "x = thisdict.get(\"model\")",
      "x = thisdict.keys()",
      "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.keys()print(x) #before the changecar[\"color\"] =\n  \"white\"print(x) #after the change",
      "x = thisdict.values()",
      "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.values()print(x) #before the changecar[\"year\"]\n  = 2020print(x) #after the change",
      "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.values()print(x) #before the changecar[\"color\"]\n  = \"red\"print(x) #after the change",
      "x = thisdict.items()",
      "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.items()print(x) #before the changecar[\"year\"]\n  = 2020print(x) #after the change",
      "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.items()print(x) #before the changecar[\"color\"]\n  = \"red\"print(x) #after the change",
      "thisdict =\t{\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\n  if \"model\" in thisdict:  print(\"Yes, 'model' is\n  one of the keys in the thisdict dictionary\")"
    ],
    "source": "w3schools",
    "url": "https://www.w3schools.com/python/python_dictionaries_access.asp",
    "level": "beginner"
  },
  {
    "topic": "python",
    "title": "Bootstrap 5 Quiz",
    "content": "Bootstrap 5 Quiz ❮ Previous Next ❯ You can test your Bootstrap 5 skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about Bootstrap 5. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the Bootstrap Quiz 5 ❯ If you don't know Bootstrap 5, we suggest that you read our Bootstrap 5 Tutorial from scratch. ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [],
    "source": "w3schools",
    "url": "https://www.w3schools.com/bootstrap5/bootstrap_quiz.php",
    "level": "beginner"
  },
  {
    "topic": "javascript",
    "title": "JavaScript Tutorial",
    "content": "JavaScript Tutorial ❮ Home Next ❯ Learn JavaScript JavaScript is the world's most popular programming language. JavaScript is the programming language of the Web. JavaScript is easy to learn. This tutorial will teach you JavaScript from basic to advanced. Start learning JavaScript now » Examples in Each Chapter With our \"Try it Yourself\" editor, you can edit the source code and view the result. Example My First JavaScript Click me to display Date and Time Try it Yourself » Use the Menu We recommend reading this tutorial, in the sequence listed in the menu. If you have a large screen, the menu will always be present on the left. If you have a small screen, open the menu by clicking the top menu sign ☰. Learn by Examples Examples are better than 1000 words. Examples are often easier to understand than text explanations. This tutorial supplements all explanations with clarifying \"Try it Yourself\" examples. If you try all the examples, you will learn a lot about JavaScript, in a very short time! JavaScript Examples » Why Study JavaScript? JavaScript is one of the 3 languages all web developers must learn: 1. HTML to define the content of web pages 2. CSS to specify the layout of web pages 3. JavaScript to program the behavior of web pages This tutorial covers every version of JavaScript: The Original JavaScript ES1 ES2 ES3 (1997-1999) The First Main Revision ES5 (2009) The Second Revision ES6 (2015) The Yearly Additions (2016, 2017 ... 2021, 2022) Learning Speed In this tutorial, the learning speed is your choice. Everything is up to you. If you are struggling, take a break, or re-read the material. Always make sure you understand all the \"Try-it-Yourself\" examples. The only way to become a clever programmer is to: Practice. Practice. Practice. Code. Code. Code ! Commonly Asked Questions How do I get JavaScript? Where can I download JavaScript? Is JavaScript Free? You don't have to get or download JavaScript. JavaScript is already running in your browser on your computer, on your tablet, and on your smart-phone. JavaScript is free to use for everyone. JavaScript Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all JavaScript Exercises JavaScript Quiz Test Test your JavaScript skills at W3Schools! Start JavaScript Quiz! Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. JavaScript References W3Schools maintains a complete JavaScript reference, including all HTML and browser objects. The reference contains examples for all properties, methods and events, and is continuously updated according to the latest web standards. Complete JavaScript Reference » Kickstart your career Get certified by completing the course Get certified w3schools CERTIFIED . 2025 ❮ Home Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [],
    "source": "w3schools",
    "url": "https://www.w3schools.com/js/default.asp",
    "level": "beginner"
  },
  {
    "topic": "javascript",
    "title": "Sass String Functions",
    "content": "Sass String Functions ❮ Previous Next ❯ Sass String Functions The string functions are used to manipulate and get information about strings. Sass strings are 1-based. The first character in a string is at index 1, not 0. The following table lists all string functions in Sass: Function Description & Example quote(string) Adds quotes to string, and returns the result. Example:quote(Hello world!)Result: \"Hello world!\" str-index(string, substring) Returns the index of the first occurrence of the substring within string. Example:str-index(\"Hello world!\", \"H\")Result: 1 str-insert(string, insert, index) Returns string with insert inserted at the specified index position. Example:str-insert(\"Hello world!\", \" wonderful\", 6)Result: \"Hello wonderful world!\" str-length(string) Returns the length of string (in characters). Example:str-length(\"Hello world!\")Result: 12 str-slice(string, start, end) Extracts characters from string; start at start and end at end, and returns the slice. Example:str-slice(\"Hello world!\", 2, 5)Result: \"ello\" to-lower-case(string) Returns a copy of string converted to lower case. Example:to-lower-case(\"Hello World!\")Result: \"hello world!\" to-upper-case(string) Returns a copy of string converted to upper case. Example:to-upper-case(\"Hello World!\")Result: \"HELLO WORLD!\" unique-id() Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session). Example:unique-id()Result: tyghefnsv unquote(string) Removes quotes around string (if any), and returns the result. Example:unquote(\"Hello world!\")Result: Hello world! ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [],
    "source": "w3schools",
    "url": "https://www.w3schools.com/sass/sass_functions_string.php",
    "level": "beginner"
  },
  {
    "topic": "javascript",
    "title": "Bootstrap 5 Quiz",
    "content": "Bootstrap 5 Quiz ❮ Previous Next ❯ You can test your Bootstrap 5 skills with W3Schools' Quiz. The Test The test contains 25 questions and there is no time limit. The test is not official, it's just a nice way to see how much you know, or don't know, about Bootstrap 5. Count Your Score You will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points. Start the Quiz Good luck! Start the Bootstrap Quiz 5 ❯ If you don't know Bootstrap 5, we suggest that you read our Bootstrap 5 Tutorial from scratch. ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [],
    "source": "w3schools",
    "url": "https://www.w3schools.com/bootstrap5/bootstrap_quiz.php",
    "level": "beginner"
  },
  {
    "topic": "javascript",
    "title": "Become a Plus User at W3schools - Upgrade to Improve Your Learning Experience",
    "content": "W3Schools Plus Unlock Powerful Features By subscribing to a plan you support the W3Schools mission to make learning available to everyone - no matter their background. Monthly Annually Free $0 /Forever This is for you that are beginning to explore coding and web development Track your progress Set your goals Build and host 1 static website 100 credits/month Access various AI features like W3Schools kAI coding tutor and interview preparation. No support Get Free W3Schools Plus $14.99 /Month This is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience. Ad-free experience Unlimited challenges Unlimited practice tests Build and host 15 static websites Build and host 1 full stack server Choose from 75+ templates 10000 credits/month Access various AI features like W3Schools kAI coding tutor and interview preparation. Cancel anytime Get Plus W3Schools Academy For teachers Spend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place. Ad-free for focused learning Dashboard to manage your classroom Study plans for structured learning Track progress with insights Interactive code challenges and projects Access to all courses and certification exams Spaces for building and publishing projects Get More Info No More Ads Learn without any distractions More Spaces! Unlock the option to create more W3Schools Spaces Learn from proven tutorials used by millions of learners! Our platform has been used by learners for over 23 years, with a continuously growing audience of learners and constantly updated and improved learning material! Monthly visits 70m+ Yearly pageviews 3bn+ Spaces created 1m+ W3Schools Spaces Code Websites directly in the browser - No setup required Sign Up For Free Read More What's the benefit and details of the subscription plans? Check out our plans here to view the difference. How are subscriptions renewed? Your subscription will be automatically renewed every month. What happens if I cancel my subscription? Your access to all the benefits for the paid period of time will continue, however the subscription will not be renewed automatically. Can I subscribe multiple accounts at once? To subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com Have some questions? Visit our support page Or send an email to sales@w3schools.com Subscribe for $14.99 /month Cancel anytime. ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [],
    "source": "w3schools",
    "url": "https://www.w3schools.com/plus/index.php",
    "level": "beginner"
  },
  {
    "topic": "sql",
    "title": "SQL Tutorial",
    "content": "SQL Tutorial ❮ Home Next ❯ Learn SQL SQL is a standard language for storing, manipulating and retrieving data in databases. Our SQL tutorial will teach you how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems. Start learning SQL now » Examples in Each Chapter With our online SQL editor, you can edit the SQL statements, and click on a button to view the result. Example SELECT * FROM Customers; Try it Yourself » Click on the \"Try it Yourself\" button to see how it works. SQL Exercises Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all SQL Exercises SQL Examples Learn by examples! This tutorial supplements all explanations with clarifying examples. See All SQL Examples SQL Quiz Test Test your SQL skills at W3Schools! Start SQL Quiz! Track Your Progress Create a free W3Schools account and get access to more features and learning materials: View your completed tutorials, exercises, and quizzes Keep an eye on your progress and daily streaks Set goals and create learning paths Create your own personal website Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. SQL References At W3Schools you will find a complete reference for keywords and functions: SQL Keyword Reference MYSQL Functions SQLServer Functions MS Access Functions SQL Quick Reference SQL Data Types Data types and ranges for Microsoft Access, MySQL and SQL Server. SQL Data Types Kickstart your career Get certified by completing the course Get certified w3schools CERTIFIED . 2025 ❮ Home Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [
      "SELECT * FROM Customers;"
    ],
    "source": "w3schools",
    "url": "https://www.w3schools.com/sql/default.asp",
    "level": "beginner"
  },
  {
    "topic": "sql",
    "title": "Sass String Functions",
    "content": "Sass String Functions ❮ Previous Next ❯ Sass String Functions The string functions are used to manipulate and get information about strings. Sass strings are 1-based. The first character in a string is at index 1, not 0. The following table lists all string functions in Sass: Function Description & Example quote(string) Adds quotes to string, and returns the result. Example:quote(Hello world!)Result: \"Hello world!\" str-index(string, substring) Returns the index of the first occurrence of the substring within string. Example:str-index(\"Hello world!\", \"H\")Result: 1 str-insert(string, insert, index) Returns string with insert inserted at the specified index position. Example:str-insert(\"Hello world!\", \" wonderful\", 6)Result: \"Hello wonderful world!\" str-length(string) Returns the length of string (in characters). Example:str-length(\"Hello world!\")Result: 12 str-slice(string, start, end) Extracts characters from string; start at start and end at end, and returns the slice. Example:str-slice(\"Hello world!\", 2, 5)Result: \"ello\" to-lower-case(string) Returns a copy of string converted to lower case. Example:to-lower-case(\"Hello World!\")Result: \"hello world!\" to-upper-case(string) Returns a copy of string converted to upper case. Example:to-upper-case(\"Hello World!\")Result: \"HELLO WORLD!\" unique-id() Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session). Example:unique-id()Result: tyghefnsv unquote(string) Removes quotes around string (if any), and returns the result. Example:unquote(\"Hello world!\")Result: Hello world! ❮ Previous Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [],
    "source": "w3schools",
    "url": "https://www.w3schools.com/sass/sass_functions_string.php",
    "level": "beginner"
  },
  {
    "topic": "sql",
    "title": "SQL Server CONVERT() Function",
    "content": "SQL Server CONVERT() Function ❮ Previous ❮ SQL Server Functions Next ❯ Example Convert an expression to int: SELECT CONVERT(int, 25.65); Try it Yourself » Definition and Usage The CONVERT() function converts a value (of any type) into a specified datatype. Tip: Also look at the CAST() function. Syntax CONVERT(data_type(length), expression, style) Parameter Values Value Description data_type Required. The datatype to convert expression to. Can be one of the following: bigint, int, smallint, tinyint, bit, decimal, numeric, money, smallmoney, float, real, datetime, smalldatetime, char, varchar, text, nchar, nvarchar, ntext, binary, varbinary, or image (length) Optional. The length of the resulting data type (for char, varchar, nchar, nvarchar, binary and varbinary) expression Required. The value to convert to another data type style Optional. The format used to convert between data types, such as a date or string format. Can be one of the following values: Converting datetime to character: Without century With century Input/Output Standard 0100mon dd yyyy hh:miAM/PMDefault 1101mm/dd/yyyy US 2102 yyyy.mm.ddANSI 3103 dd/mm/yyyyBritish/French 4104dd.mm.yyyyGerman 5105 dd-mm-yyyyItalian 6106dd mon yyyy- 7107Mon dd, yyyy- 8108hh:mm:ss- 9109mon dd yyyy hh:mi:ss:mmmAM (or PM)Default + millisec 10110mm-dd-yyyyUSA 11111 yyyy/mm/ddJapan 12112 yyyymmddISO 13113dd mon yyyy hh:mi:ss:mmm Europe (24 hour clock)> 14114hh:mi:ss:mmm24 hour clock 20120yyyy-mm-dd hh:mi:ssODBC canonical (24 hour clock) 21121yyyy-mm-dd hh:mi:ss.mmmODBC canonical (24 hour clock) 126yyyy-mm-ddThh:mi:ss.mmmISO8601 127yyyy-mm-ddThh:mi:ss.mmmZISO8601 (with time zone Z) 130dd mon yyyy hh:mi:ss:mmmAMHijiri 131dd/mm/yy hh:mi:ss:mmmAMHijiri Converting float to real: Value Explanation 0Maximum 6 digits (default) 18 digits 216 digits Converting money to character: Value Explanation 0No comma delimiters, 2 digits to the right of decimal 1Comma delimiters, 2 digits to the right of decimal 2 No comma delimiters, 4 digits to the right of decimal Technical Details Works in: SQL Server (starting with 2008), Azure SQL Database, Azure SQL Data Warehouse, Parallel Data Warehouse More Examples Example Convert an expression from one data type to another (varchar): SELECT CONVERT(varchar, 25.65); Try it Yourself » Example Convert an expression from one data type to another (datetime): SELECT CONVERT(datetime, '2017-08-25'); Try it Yourself » Example Convert an expression from one data type to another (varchar): SELECT CONVERT(varchar, '2017-08-25', 101); Try it Yourself » ❮ Previous ❮ SQL Server Functions Next ❯ ★ +1 Track your progress - it's free! Log in Sign Up",
    "code_examples": [
      "SELECT CONVERT(int, 25.65);",
      "CONVERT(data_type(length), expression, style)",
      "SELECT CONVERT(varchar, 25.65);",
      "SELECT CONVERT(datetime, '2017-08-25');",
      "SELECT CONVERT(varchar,\n  '2017-08-25', 101);"
    ],
    "source": "w3schools",
    "url": "https://www.w3schools.com/sql/func_sqlserver_convert.asp",
    "level": "beginner"
  },
  {
    "topic": "python",
    "title": "Python Tutorial | Learn Python Programming Language | GeeksforGeeks",
    "content": "Python Tutorial | Learn Python Programming Language Last Updated : 30 Apr, 2025 Comments Improve Suggest changes Like Article Like Report Python Tutorial – Python is one of the most popular programming languages. It’s simple to use, packed with features and supported by a wide range of libraries and frameworks. Its clean syntax makes it beginner-friendly.Python is:A high-level language, used in web development, data science, automation, AI and more.Known for its readability, which means code is easier to write, understand and maintain.Backed by library support, so we don’t have to build everything from scratch, there’s probably a library that already does what we need.Why to Learn Python?Python requires fewer lines of code compared to other programming languages.Python is in high demand as it provides many job opportunities in Software Development, Data Science and AI/ML.Python provides popular Web Development, AI/ML, Data Science and Data Analysis Libraries like Django, Flask, Pandas, Tensorflow, Scikit-learn and many more.Python is an object oriented programming language which encapsulates code within object.Python is cross-platform which works on Windows, Mac and Linux without major changes.Python is used by big companies like Google, Netflix and NASA.First Python ProgramHere is a simple Python code, printing a string. We recommend we to edit the code and try to print our own name. Python print(\"Hello World\") OutputHello World 1. Python BasicsIn this section, we’ll cover the basics of Python programming, including installing Python, writing first program, understanding comments and working with variables, keywords and operators. These are essential building blocks to get started with Python coding.Before starting to learn python we need to install python on our system.IntroductionInput and OutputVariablesOperatorsQuiz:Basics, I/OKeywordsData TypesQuiz:Data Types, Numbers, BooleanConditional StatementsPython LoopsQuiz :Control Flow, Loops2. Python FunctionsPython Functions are the backbone of organized and efficient code in Python. Here, in this section of Python 3 tutorial we'll explore their syntax, parameter handling, return values and variable scope. From basic concepts to advanced techniques like closures and decorators. Along the way, we'll also introduce versatile functions like range(), map, filter and lambda functions. def keywordUse of pass Statement in FunctionReturn statementGlobal and Local VariablesRecursion in Python*args and **kwargs in Function‘Self’ as Default ArgumentFirst Class FunctionLambda FunctionMap, Reduce and Filter FunctionInner FunctionDecoratorsQuiz: Functions3. Python Data StructuresPython offers versatile collections of data types, including lists, string, tuples, sets, dictionaries and arrays. In this section, we will learn about each data types in detail.StringsListQuiz: List, StringTuplesDictionaryQuiz: Tuples, DictionarySetsArraysList ComprehensionQuiz:Sets, Arrays, List ComprehensionPython's collections module offers essential data structures, including the following:CountersHeapqDequeOrderedDictDefaultdictQuiz: Data StructuresTo learn data structure and algorithm with python in detail, you can refer to our DSA with Python Tutorial.4. Python OOPs ConceptsIn this section of Python OOPs, we'll explore the core principles of object-oriented programming (OOP) in Python. From encapsulation to inheritance, polymorphism, abstract classes and iterators, we'll cover the essential concepts that helps you to build modular, reusable and scalable code. Classes and ObjectsPolymorphismInheritanceAbstractEncapsulationIteratorsQuiz:OOPs5. Python Exception HandlingIn this section of Python Tutorial, we'll explore Python Exception Handling that how Python deals with unexpected errors, enabling us to write fault-tolerant code. We'll cover file handling, including reading from and writing to files.Exception handlingTry and ExceptBuilt-in ExceptionUser defined ExceptionQuiz:Exception Handling6. File HandlingIn this section, we will cover file handling, including reading from and writing to files.File HandlingDifferent File ModesRead FilesWrite/Create FilesOS Modulepathlib ModuleDirectory ManagementQuiz:File Handling7. Python Database HandlingIn this section we will learn how to access and work with MySQL and MongoDB databasesPython MongoDB TutorialPython MySQL Tutorial8. Python Packages or LibrariesPython is a huge collection of Python Packages standard libraries that make development easier. These libraries help with a wide range of tasks and can save you a lot of time by providing ready-to-use tools.Some commonly used types of libraries in Python include:Built-in Modules in PythonPython DSA LibrariesPython GUI Libraries9. Data Science with Python1. Foundational Libraries: These are the libraries that form the base for all data science work. Start here to build a strong foundation.NumPyPandasMatplotlib2. Advanced Visualization and Statistical Tools: Once you’re comfortable with basic data handling and visualization, move to creating cleaner visuals and performing statistical analysis.SeabornStatsmodel3. Machine Learning Libraries: After data manipulation and visualization, learn machine learning, starting with simpler models and moving to advanced ones.Scikit-learnXGBoost /LightGBM4. Deep Learning Frameworks: If you’re interested in AI and deep learning, these libraries will allow you to build and train neural networks.TensorFlow and KerasPyTorchTo learn more, you can refer to Python for Data Science.10. Web Development with Python1. Core Web Frameworks (Backend Development with Python): These are the tools for building Python-based web applications.FlaskDjango2. Database Integration: Learn how to connect Python web frameworks to databases for storing and retrieving data.SQLiteSQLAlchemyDjango ORM3. Front-End and Backend Integration: Learn how to connect Python backends with front-end technologies to create dynamic, full-stack web applications.Jinja2 (Flask)Django Templates4. API Development: Learn to build APIs (Application Programming Interfaces) for connecting your backend with front-end apps or other services.Flask-RESTfulDjango REST Framework (DRF)To learn more, you can refer to Python for Web Development.Python QuizzesPython quiz page covers topics including variables, data types and how to manage output effectively. You'll explore operators and control flow to structure our code, along with loops (for and while) for repetitive tasks. Additionally, you'll gain knowledge with Python data structures such as lists, tuples, dictionaries and sets.QuizzesPython PracticeThe Python Coding Practice Problems page offers exercises for all skill levels, covering basics, loops, functions and OOP. You'll work with lists, strings, dictionaries, sets and advanced structures like heaps and deques. These problems help build a strong foundation and boost confidence in solving real-world coding challenges.Python Coding ProblemsFeatures of PythonPython stands out because of its simplicity and versatility, making it a top choice for both beginners and professionals. Here are some key features or characteristics:Easy to Read and Write: Python’s syntax is clean and simple, making the code easy to understand and write. It is suitable for beginners.Interpreted Language: Python executes code line by line, which helps in easy debugging and testing during development.Object-Oriented and Functional: Python supports both object-oriented and functional programming, giving developers flexibility in how they structure their code.Dynamically Typed: You don’t need to specify data types when declaring variables; Python figures it out automatically.Extensive Libraries: Python has a rich collection of libraries for tasks like web development, data analysis, machine learning and more.Cross-Platform: Python can run on different operating systems like Windows, macOS and Linux without modification.Community Support: Python has a large, active community that continuously contributes resources, libraries and tools, making it easier to find help or solutions. This Python tutorial is updated based on latest Python 3.13.1 version.Applications of PythonWeb Development: Frameworks like Django and Flask can be used to create dynamic websites and web applications quickly and efficiently.Data Science & Analysis: Python is most preferred language for data analysis, visualization and handling large datasets. Because of extensive libraries like Pandas, NumPy and Matplotlib.Machine Learning & AI: Python is popular in AI and machine learning because of its powerful libraries like TensorFlow, Keras and Scikit-learn.Scripting & Automation: Python’s simplicity makes it ideal for writing scripts that automate tasks in different systems, from server management to file handling. Python is commonly used to automate repetitive tasks, making processes faster and more efficient.Web Scraping: Libraries like Beautiful Soup and Scrapy.Desktop App Development: Python can be used to build desktop applications using frameworks like Tkinter and PyQt. Python is also used for game development, with libraries like Pygame to create simple games.Python vs. Other Programming LanguagesBelow is the comparison of Python with C, C++ and Java:FeaturePythonC/C++JavaScriptJavaTypeInterpretedCompiledInterpretedCompiled and Interpreted ParadigmMulti-paradigm (object-oriented, procedural, functional)Procedural (C), Multi-paradigm (C++: object-oriented, generic)Multi-paradigm (event-driven, functional, object-oriented)Object-oriented, structuredMemory ManagementAutomaticManualAutomaticAutomaticSyntaxSimpleComplexSimpleComplexUse CasesWeb development, data analysis, machine learningSystem programming, embedded systems, game/high-performance developmentLarge-scale applications, enterprise softwareLarge-scale applications, enterprise softwareNotable Frameworks/LibrariesDjango, FlaskStandard Library, BoostSpring, HibernateSpring, HibernateCommunity SupportStrongStrongStrongStrongJob MarketAbundantAbundantAbundantAbundantList of Companies Using PythonThese are some Popular companies that use Python in their workflow:CompanyDescriptionGoogleUses Python for various applications, including their search engine and machine learning projects.InstagramThe backend of Instagram is built using Python, enabling it to handle millions of users efficiently.SpotifyPython is used for data analysis and backend services, helping improve user recommendations.DropboxPython powers the desktop client of Dropbox, making it easy to sync files across devices.NetflixPython helps Netflix with data analysis and managing its content recommendation algorithms.RedditOne of the largest online communities, Reddit, uses Python for its core functionalities.UberUber uses Python for various features, including dynamic pricing and data analysis.PinterestPython plays a key role in the backend of Pinterest, helping scale and manage user content.Career & Jobs in PythonPython offer diverse opportunities across industries, here we have listed all the best career opportunity that anyone can pursue after learning Python.CareerAverage Salary (INR) Per AnnumAverage Salary (USD) Per AnnumPython Developer₹500,000 – ₹1,200,000$60,000 – $110,000Data Scientist₹600,000 – ₹1,500,000$70,000 – $130,000Machine Learning Engineer₹700,000 – ₹1,800,000$75,000 – $140,000Full Stack Developer₹600,000 – ₹1,300,000$65,000 – $120,000DevOps Engineer₹800,000 – ₹2,000,000$80,000 – $140,000Automation Engineer₹500,000 – ₹1,200,000$55,000 – $100,000Data Analyst₹400,000 – ₹900,000$50,000 – $90,000Software Engineer₹500,000 – ₹1,500,000$65,000 – $120,000Backend Developer₹600,000 – ₹1,300,000$70,000 – $125,000AI Engineer₹900,000 – ₹2,500,000$90,000 – $160,000Python Latest & Upcoming FeaturesPython 3.13 is the most recent stable release of the programming language, featuring a blend of updates to its syntax, implementation and standard library. Key enhancements include the introduction of a revamped interactive interpreter, experimental capabilities for operating in a free-threaded mode (as outlined in PEP 703) and the addition of a Just-In-Time (JIT) compiler (detailed in PEP 744).The upcoming version of Python is Python 3.14 and it is expected to include the following notable updates: UTF-8 Mode Default (PEP 686), Shorthand Syntax for Keyword Arguments, Enhanced f-strings, JSON-based Simple API (PEP 691).--> In this tutorial, we've provided the latest Python 3.13 version compiler where you can edit and compile your written code directly with just one click of the RUN Button. So test yourself with Python first exercises. Comment More infoAdvertise with us Next Article Python Introduction kartik Follow Improve Article Tags : Python Python Programs python Tutorials Practice Tags : pythonpython",
    "code_examples": [],
    "source": "geeksforgeeks",
    "url": "https://www.geeksforgeeks.org/python-programming-language/",
    "level": "intermediate"
  },
  {
    "topic": "python",
    "title": "About us | GeeksforGeeks",
    "content": "About us About GeeksforGeeks: Company Profile and Brand: GeeksforGeeks is a comprehensive educational portal that empowers learners across domains—spanning computer science, school-level subjects, commerce, essential software tools (Excel, Word, etc.), exam preparation resources (GATE, JEE, NEET etc.), and provides them with top notch interview preparation services. With over 50 million registered users globally, and millions of daily visitors, GfG provides a vast and growing collection of tutorials, interview guides, concept explainers, coding challenges, practice problems, and structured courses, catering to both academic and professional needs. We’re especially known for our in-depth resources on interview preparation, helping thousands land roles at top tech companies with our curated content, mock interviews, and company-wise interview experiences. Our courses and learning paths for high demand technologies like DSA, System Design, Web Development, Machine Learning- are ideal for professionals aiming to level up or switch domains. Our certifications ensure to add credibility and enhance our learners’ career prospects. Our content is created and curated by top mentors from renowned institutions and organizations, ensuring quality and relevance. With a focus on clarity, accessibility, and impact, we help students and professionals alike turn curiosity into expertise. GeeksforGeeks has become a trusted name in education—offering well-structured tutorials, hands-on practice problems, conceptual articles, and guided courses. At GeeksforGeeks, we’re more than just a platform—we’re a community. A space to learn, grow, and stay ahead in an ever-evolving world of education and technology. Corporate History, Mission, Vision, and Motto: Corporate History:Founded in 2008 by Mr. Sandeep Jain, a visionary computer science educator, GeeksforGeeks began as a platform to simplify complex coding concepts. Over the years, it has evolved into a full-spectrum educational portal—supporting learners not only in programming but also in academics, skill-building, and professional growth. Mission:To empower learners across domains by providing accessible, high-quality educational content that bridges the gap between theory and practical application—helping them excel in academics, careers, and beyond. Vision:To be the most comprehensive, inclusive, and trusted learning platform—enabling individuals from all walks of life to access knowledge, gain confidence, and succeed in their educational and career journeys. Motto:“Learn, Practice, and Excel” – A commitment to lifelong learning, hands-on experience, and achieving personal growth, no matter the field. Company Founder: Our founder Sandeep Jain is a visionary entrepreneur and esteemed computer science expert. Fueled by his unwavering passion for coding and education, laid the very bedrock upon which GeeksforGeeks stands today, and his indomitable spirit has been instrumental in its remarkable growth and resounding success. As the steadfast driving force behind the company, Sandeep remains a beacon of guidance and inspiration, propelling the team to constantly challenging limits and craft transformative learning experiences.",
    "code_examples": [],
    "source": "geeksforgeeks",
    "url": "https://www.geeksforgeeks.org/about/",
    "level": "intermediate"
  },
  {
    "topic": "python",
    "title": "OS Module in Python with Examples | GeeksforGeeks",
    "content": "OS Module in Python with Examples Last Updated : 01 Aug, 2024 Comments Improve Suggest changes Like Article Like Report The OS module in Python provides functions for interacting with the operating system. OS comes under Python’s standard utility modules. This module provides a portable way of using operating system-dependent functionality. The *os* and *os.path* modules include many functions to interact with the file system. Python-OS-Module FunctionsHere we will discuss some important functions of the Python os module : Handling the Current Working DirectoryCreating a DirectoryListing out Files and Directories with PythonDeleting Directory or Files using PythonHandling the Current Working DirectoryConsider Current Working Directory(CWD) as a folder, where Python is operating. Whenever the files are called only by their name, Python assumes that it starts in the CWD which means that name-only reference will be successful only if the file is in the Python’s CWD. Note: The folder where the Python script is running is known as the Current Directory. This is not the path where the Python script is located. Getting the Current working directoryTo get the location of the current working directory os.getcwd() is used. Example: This code uses the ‘os' module to get and print the current working directory (CWD) of the Python script. It retrieves the CWD using the ‘os.getcwd()' and then prints it to the console. Python import os cwd = os.getcwd() print(\"Current working directory:\", cwd) Output: Current working directory: /home/nikhil/Desktop/gfgChanging the Current working directoryTo change the current working directory(CWD) os.chdir() method is used. This method changes the CWD to a specified path. It only takes a single argument as a new directory path. Note: The current working directory is the folder in which the Python script is operating. Example: The code checks and displays the current working directory (CWD) twice: before and after changing the directory up one level using os.chdir('../'). It provides a simple example of how to work with the current working directory in Python. Python import os def current_path(): print(\"Current working directory before\") print(os.getcwd()) print() current_path() os.chdir('../') current_path() Output: Current working directory beforeC:\\Users\\Nikhil Aggarwal\\Desktop\\gfgCurrent working directory afterC:\\Users\\Nikhil Aggarwal\\DesktopCreating a DirectoryThere are different methods available in the OS module for creating a directory. These are – os.mkdir()os.makedirs()Using os.mkdir()By using os.mkdir() method in Python is used to create a directory named path with the specified numeric mode. This method raises FileExistsError if the directory to be created already exists. Example: This code creates two directories: “GeeksforGeeks” within the “D:/Pycharm projects/” directory and “Geeks” within the “D:/Pycharm projects” directory. The first directory is created using the os.mkdir() method without specifying the mode. The second directory is created using the same method, but a specific mode (0o666) is provided, which grants read and write permissions. The code then prints messages to indicate that the directories have been created. Python import os directory = \"GeeksforGeeks\" parent_dir = \"D:/Pycharm projects/\" path = os.path.join(parent_dir, directory) os.mkdir(path) print(\"Directory '% s' created\" % directory) directory = \"Geeks\" parent_dir = \"D:/Pycharm projects\" mode = 0o666 path = os.path.join(parent_dir, directory) os.mkdir(path, mode) print(\"Directory '% s' created\" % directory) Output: Directory 'GeeksforGeeks' createdDirectory 'Geeks' createdUsing os.makedirs()os.makedirs() method in Python is used to create a directory recursively. That means while making leaf directory if any intermediate-level directory is missing, os.makedirs() method will create them all. Example: This code creates two directories, “Nikhil” and “c”, within different parent directories. It uses the os.makedirs function to ensure that parent directories are created if they don’t exist. It also sets the permissions for the “c” directory. The code prints messages to confirm the creation of these directories Python import os directory = \"Nikhil\" parent_dir = \"D:/Pycharm projects/GeeksForGeeks/Authors\" path = os.path.join(parent_dir, directory) os.makedirs(path) print(\"Directory '% s' created\" % directory) directory = \"c\" parent_dir = \"D:/Pycharm projects/GeeksforGeeks/a/b\" mode = 0o666 path = os.path.join(parent_dir, directory) os.makedirs(path, mode) print(\"Directory '% s' created\" % directory) Output: Directory 'Nikhil' createdDirectory 'c' createdListing out Files and Directories with PythonThere is os.listdir() method in Python is used to get the list of all files and directories in the specified directory. If we don’t specify any directory, then the list of files and directories in the current working directory will be returned. Example: This code lists all the files and directories in the root directory (“/”). It uses the os.listdir function to get the list of files and directories in the specified path and then prints the results. Python import os path = \"/\" dir_list = os.listdir(path) print(\"Files and directories in '\", path, \"' :\") print(dir_list) Output: Files and directories in ' / ' :['sys', 'run', 'tmp', 'boot', 'mnt', 'dev', 'proc', 'var', 'bin', 'lib64', 'usr', 'lib', 'srv', 'home', 'etc', 'opt', 'sbin', 'media']Deleting Directory or Files using PythonOS module provides different methods for removing directories and files in Python. These are – Using os.remove()Using os.rmdir()Using os.remove() Methodos.remove() method in Python is used to remove or delete a file path. This method can not remove or delete a directory. If the specified path is a directory then OSError will be raised by the method. Example: Suppose the file contained in the folder are: This code removes a file named “file1.txt” from the specified location “D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/”. It uses the os.remove function to delete the file at the specified path. Python import os file = 'file1.txt' location = \"D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/\" path = os.path.join(location, file) os.remove(path) Output: Using os.rmdir()os.rmdir() method in Python is used to remove or delete an empty directory. OSError will be raised if the specified path is not an empty directory. Example: Suppose the directories are This code attempts to remove a directory named “Geeks” located at “D:/Pycharm projects/”. It uses the os.rmdir function to delete the directory. If the directory is empty, it will be removed. If it contains files or subdirectories, you may encounter an error. Python import os directory = \"Geeks\" parent = \"D:/Pycharm projects/\" path = os.path.join(parent, directory) os.rmdir(path) Output: Commonly Used FunctionsUsing os.name functionThis function gives the name of the operating system dependent module imported. The following names have currently been registered: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’ and ‘riscos’. Python import os print(os.name) Output: posixNote: It may give different output on different interpreters, such as ‘posix’ when you run the code here. Using os.error FunctionAll functions in this module raise OSError in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. os.error is an alias for built-in OSError exception. This code reads the contents of a file named ‘GFG.txt’. It uses a ‘try…except‘ block to handle potential errors, particularly the ‘IOError‘ that may occur if there’s a problem reading the file. If an error occurs, it will print a message saying, “Problem reading: GFG.txt.” Python import os try: filename = 'GFG.txt' f = open(filename, 'rU') text = f.read() f.close() except IOError: print('Problem reading: ' + filename) Output: Problem reading: GFG.txtUsing os.popen() FunctionThis method opens a pipe to or from command. The return value can be read or written depending on whether the mode is ‘r’ or ‘w’. Syntax: os.popen(command[, mode[, bufsize]])Parameters mode & bufsize are not necessary parameters, if not provided, default ‘r’ is taken for mode. This code opens a file named ‘GFG.txt’ in write mode, writes “Hello” to it, and then reads and prints its contents. The use of os.popen is not recommended, and standard file operations are used for these tasks. Python import os fd = \"GFG.txt\" file = open(fd, 'w') file.write(\"Hello\") file.close() file = open(fd, 'r') text = file.read() print(text) file = os.popen(fd, 'w') file.write(\"Hello\") Output: HelloNote: Output for popen() will not be shown, there would be direct changes into the file. Using os.close() FunctionClose file descriptor fd. A file opened using open(), can be closed by close()only. But file opened through os.popen(), can be closed with close() or os.close(). If we try closing a file opened with open(), using os.close(), Python would throw TypeError. Python import os fd = \"GFG.txt\" file = open(fd, 'r') text = file.read() print(text) os.close(file) Output: Traceback (most recent call last): File \"C:\\Users\\GFG\\Desktop\\GeeksForGeeksOSFile.py\", line 6, in os.close(file)TypeError: an integer is required (got type _io.TextIOWrapper)Note: The same error may not be thrown, due to the non-existent file or permission privilege. Using os.rename() FunctionA file old.txt can be renamed to new.txt, using the function os.rename(). The name of the file changes only if, the file exists and the user has sufficient privilege permission to change the file. Python import os fd = \"GFG.txt\" os.rename(fd,'New.txt') os.rename(fd,'New.txt') Output: Traceback (most recent call last): File \"C:\\Users\\GFG\\Desktop\\ModuleOS\\GeeksForGeeksOSFile.py\", line 3, in os.rename(fd,'New.txt')FileNotFoundError: [WinError 2] The system cannot find thefile specified: 'GFG.txt' -> 'New.txt' A file name “GFG.txt” exists, thus when os.rename() is used the first time, the file gets renamed. Upon calling the function os.rename() second time, file “New.txt” exists and not “GFG.txt” thus Python throws FileNotFoundError. Using os.remove() FunctionUsing the Os module we can remove a file in our system using the os.remove() method. To remove a file we need to pass the name of the file as a parameter. Python import os #importing os module. os.remove(\"file_name.txt\") #removing the file. The OS module provides us a layer of abstraction between us and the operating system. When we are working with os module always specify the absolute path depending upon the operating system the code can run on any os but we need to change the path exactly. If you try to remove a file that does not exist you will get FileNotFoundError. Using os.path.exists() FunctionThis method will check whether a file exists or not by passing the name of the file as a parameter. OS module has a sub-module named PATH by using which we can perform many more functions. Python import os #importing os module result = os.path.exists(\"file_name\") #giving the name of the file as a parameter. print(result) Output: FalseAs in the above code, the file does not exist it will give output False. If the file exists it will give us output True. Using os.path.getsize() FunctionIn os.path.getsize() function, python will give us the size of the file in bytes. To use this method we need to pass the name of the file as a parameter. Python import os #importing os module size = os.path.getsize(\"filename\") print(\"Size of the file is\", size,\" bytes.\") Output: Size of the file is 192 bytes. Comment More infoAdvertise with us Next Article Generating Random id's using UUID in Python P Piyush Doorwar Improve Article Tags : Python python-modules python-os-module Practice Tags : python",
    "code_examples": [],
    "source": "geeksforgeeks",
    "url": "https://www.geeksforgeeks.org/os-module-python-examples/",
    "level": "intermediate"
  },
  {
    "topic": "data structures",
    "title": "Data Structures Tutorial | GeeksforGeeks",
    "content": "Data Structures Tutorial Last Updated : 12 Apr, 2025 Comments Improve Suggest changes Like Article Like Report Data structures are the fundamental building blocks of computer programming. They define how data is organized, stored, and manipulated within a program. Understanding data structures is very important for developing efficient and effective algorithms. What is Data Structure?A data structure is a storage that is used to store and organize data. It is a way of arranging data on a computer so that it can be accessed and updated efficiently.A data structure is not only used for organizing the data. It is also used for processing, retrieving, and storing data. There are different basic and advanced types of data structures that are used in almost every program or software system that has been developed. So we must have good knowledge about data structures. Classification of Data StructureClassification of Data StructureLinear Data Structure: Data structure in which data elements are arranged sequentially or linearly, where each element is attached to its previous and next adjacent elements, is called a linear data structure. Example: Array, Stack, Queue, Linked List, etc.Static Data Structure: Static data structure has a fixed memory size. It is easier to access the elements in a static data structure. Example: array.Dynamic Data Structure: In dynamic data structure, the size is not fixed. It can be randomly updated during the runtime which may be considered efficient concerning the memory (space) complexity of the code. Example: Queue, Stack, etc.Non-Linear Data Structure: Data structures where data elements are not placed sequentially or linearly are called non-linear data structures. In a non-linear data structure, we can’t traverse all the elements in a single run only. Examples: Trees and Graphs.Please refer Complete Data Structures & Algorithms Tutorial for topic-wise guide, practice problems and interview questions. Comment More infoAdvertise with us Next Article LMNs-Data Structures H harendrakumar123 Follow Improve Article Tags : Advanced Data Structure Data Structures DSA Practice Tags : Advanced Data StructureData Structures",
    "code_examples": [],
    "source": "geeksforgeeks",
    "url": "https://www.geeksforgeeks.org/data-structures/",
    "level": "advanced"
  },
  {
    "topic": "data structures",
    "title": "About us | GeeksforGeeks",
    "content": "About us About GeeksforGeeks: Company Profile and Brand: GeeksforGeeks is a comprehensive educational portal that empowers learners across domains—spanning computer science, school-level subjects, commerce, essential software tools (Excel, Word, etc.), exam preparation resources (GATE, JEE, NEET etc.), and provides them with top notch interview preparation services. With over 50 million registered users globally, and millions of daily visitors, GfG provides a vast and growing collection of tutorials, interview guides, concept explainers, coding challenges, practice problems, and structured courses, catering to both academic and professional needs. We’re especially known for our in-depth resources on interview preparation, helping thousands land roles at top tech companies with our curated content, mock interviews, and company-wise interview experiences. Our courses and learning paths for high demand technologies like DSA, System Design, Web Development, Machine Learning- are ideal for professionals aiming to level up or switch domains. Our certifications ensure to add credibility and enhance our learners’ career prospects. Our content is created and curated by top mentors from renowned institutions and organizations, ensuring quality and relevance. With a focus on clarity, accessibility, and impact, we help students and professionals alike turn curiosity into expertise. GeeksforGeeks has become a trusted name in education—offering well-structured tutorials, hands-on practice problems, conceptual articles, and guided courses. At GeeksforGeeks, we’re more than just a platform—we’re a community. A space to learn, grow, and stay ahead in an ever-evolving world of education and technology. Corporate History, Mission, Vision, and Motto: Corporate History:Founded in 2008 by Mr. Sandeep Jain, a visionary computer science educator, GeeksforGeeks began as a platform to simplify complex coding concepts. Over the years, it has evolved into a full-spectrum educational portal—supporting learners not only in programming but also in academics, skill-building, and professional growth. Mission:To empower learners across domains by providing accessible, high-quality educational content that bridges the gap between theory and practical application—helping them excel in academics, careers, and beyond. Vision:To be the most comprehensive, inclusive, and trusted learning platform—enabling individuals from all walks of life to access knowledge, gain confidence, and succeed in their educational and career journeys. Motto:“Learn, Practice, and Excel” – A commitment to lifelong learning, hands-on experience, and achieving personal growth, no matter the field. Company Founder: Our founder Sandeep Jain is a visionary entrepreneur and esteemed computer science expert. Fueled by his unwavering passion for coding and education, laid the very bedrock upon which GeeksforGeeks stands today, and his indomitable spirit has been instrumental in its remarkable growth and resounding success. As the steadfast driving force behind the company, Sandeep remains a beacon of guidance and inspiration, propelling the team to constantly challenging limits and craft transformative learning experiences.",
    "code_examples": [],
    "source": "geeksforgeeks",
    "url": "https://www.geeksforgeeks.org/about/",
    "level": "advanced"
  },
  {
    "topic": "algorithms",
    "title": "Algorithms Tutorial | GeeksforGeeks",
    "content": "Algorithms Tutorial Last Updated : 12 Apr, 2025 Comments Improve Suggest changes Like Article Like Report Algorithm is a step-by-step procedure for solving a problem or accomplishing a task. In the context of data structures and algorithms, it is a set of well-defined instructions for performing a specific computational task. Algorithms are fundamental to computer science and play a very important role in designing efficient solutions for various problems. Understanding algorithms is essential for anyone interested in mastering data structures and algorithms.What is an Algorithm?An algorithm is a finite sequence of well-defined instructions that can be used to solve a computational problem. It provides a step-by-step procedure that convert an input into a desired output.Algorithms typically follow a logical structure:Input: The algorithm receives input data.Processing: The algorithm performs a series of operations on the input data.Output: The algorithm produces the desired output.What is the Need for Algorithms?Algorithms are essential for solving complex computational problems efficiently and effectively. They provide a systematic approach to:Solving problems: Algorithms break down problems into smaller, manageable steps.Optimizing solutions: Algorithms find the best or near-optimal solutions to problems.Automating tasks: Algorithms can automate repetitive or complex tasks, saving time and effort.Please refer Complete Data Structures & Algorithms Tutorial for topic-wise guide, practice problems and interview questions. Comment More infoAdvertise with us Next Article LMNs- Algorithms H harendrakumar123 Follow Improve Article Tags : Algorithms DSA Practice Tags : Algorithms",
    "code_examples": [],
    "source": "geeksforgeeks",
    "url": "https://www.geeksforgeeks.org/fundamentals-of-algorithms/",
    "level": "advanced"
  },
  {
    "topic": "algorithms",
    "title": "About us | GeeksforGeeks",
    "content": "About us About GeeksforGeeks: Company Profile and Brand: GeeksforGeeks is a comprehensive educational portal that empowers learners across domains—spanning computer science, school-level subjects, commerce, essential software tools (Excel, Word, etc.), exam preparation resources (GATE, JEE, NEET etc.), and provides them with top notch interview preparation services. With over 50 million registered users globally, and millions of daily visitors, GfG provides a vast and growing collection of tutorials, interview guides, concept explainers, coding challenges, practice problems, and structured courses, catering to both academic and professional needs. We’re especially known for our in-depth resources on interview preparation, helping thousands land roles at top tech companies with our curated content, mock interviews, and company-wise interview experiences. Our courses and learning paths for high demand technologies like DSA, System Design, Web Development, Machine Learning- are ideal for professionals aiming to level up or switch domains. Our certifications ensure to add credibility and enhance our learners’ career prospects. Our content is created and curated by top mentors from renowned institutions and organizations, ensuring quality and relevance. With a focus on clarity, accessibility, and impact, we help students and professionals alike turn curiosity into expertise. GeeksforGeeks has become a trusted name in education—offering well-structured tutorials, hands-on practice problems, conceptual articles, and guided courses. At GeeksforGeeks, we’re more than just a platform—we’re a community. A space to learn, grow, and stay ahead in an ever-evolving world of education and technology. Corporate History, Mission, Vision, and Motto: Corporate History:Founded in 2008 by Mr. Sandeep Jain, a visionary computer science educator, GeeksforGeeks began as a platform to simplify complex coding concepts. Over the years, it has evolved into a full-spectrum educational portal—supporting learners not only in programming but also in academics, skill-building, and professional growth. Mission:To empower learners across domains by providing accessible, high-quality educational content that bridges the gap between theory and practical application—helping them excel in academics, careers, and beyond. Vision:To be the most comprehensive, inclusive, and trusted learning platform—enabling individuals from all walks of life to access knowledge, gain confidence, and succeed in their educational and career journeys. Motto:“Learn, Practice, and Excel” – A commitment to lifelong learning, hands-on experience, and achieving personal growth, no matter the field. Company Founder: Our founder Sandeep Jain is a visionary entrepreneur and esteemed computer science expert. Fueled by his unwavering passion for coding and education, laid the very bedrock upon which GeeksforGeeks stands today, and his indomitable spirit has been instrumental in its remarkable growth and resounding success. As the steadfast driving force behind the company, Sandeep remains a beacon of guidance and inspiration, propelling the team to constantly challenging limits and craft transformative learning experiences.",
    "code_examples": [],
    "source": "geeksforgeeks",
    "url": "https://www.geeksforgeeks.org/about/",
    "level": "advanced"
  }
]